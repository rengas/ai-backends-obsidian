/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/types/config.ts
var config_exports = {};
__export(config_exports, {
  DEFAULT_SETTINGS: () => DEFAULT_SETTINGS
});
var DEFAULT_SETTINGS;
var init_config = __esm({
  "src/types/config.ts"() {
    DEFAULT_SETTINGS = {
      apiUrl: "http://localhost:3000",
      apiKey: "",
      configFilePath: "ai-config/config.yaml",
      // Will be removed after migration
      // Global defaults
      defaultProvider: "ollama",
      defaultModel: "gemma3:4b",
      defaultTemperature: 0.3,
      defaultStream: true,
      // Operation-specific defaults
      summarize: {
        provider: "ollama",
        model: "gemma3:4b",
        temperature: 0.3,
        stream: true,
        maxLength: 100
      },
      keywords: {
        provider: "ollama",
        model: "mistrallite:latest",
        temperature: 0.3,
        stream: false,
        maxKeywords: 500
      },
      translate: {
        provider: "ollama",
        model: "gemma3:4b",
        temperature: 0.1,
        stream: true,
        defaultTargetLanguage: "en"
      },
      rewrite: {
        provider: "ollama",
        model: "gemma3:4b",
        temperature: 0.3,
        stream: true
      },
      compose: {
        provider: "ollama",
        model: "gemma3:4b",
        temperature: 0.3,
        stream: true,
        maxLength: 50
      }
    };
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AIPlugin
});
module.exports = __toCommonJS(main_exports);

// src/main.ts
var import_obsidian17 = require("obsidian");
init_config();

// src/services/config-service.ts
var import_obsidian = require("obsidian");

// node_modules/js-yaml/dist/js-yaml.mjs
function isNothing(subject) {
  return typeof subject === "undefined" || subject === null;
}
function isObject(subject) {
  return typeof subject === "object" && subject !== null;
}
function toArray(sequence) {
  if (Array.isArray(sequence))
    return sequence;
  else if (isNothing(sequence))
    return [];
  return [sequence];
}
function extend(target, source) {
  var index, length, key, sourceKeys;
  if (source) {
    sourceKeys = Object.keys(source);
    for (index = 0, length = sourceKeys.length; index < length; index += 1) {
      key = sourceKeys[index];
      target[key] = source[key];
    }
  }
  return target;
}
function repeat(string, count) {
  var result = "", cycle;
  for (cycle = 0; cycle < count; cycle += 1) {
    result += string;
  }
  return result;
}
function isNegativeZero(number) {
  return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
}
var isNothing_1 = isNothing;
var isObject_1 = isObject;
var toArray_1 = toArray;
var repeat_1 = repeat;
var isNegativeZero_1 = isNegativeZero;
var extend_1 = extend;
var common = {
  isNothing: isNothing_1,
  isObject: isObject_1,
  toArray: toArray_1,
  repeat: repeat_1,
  isNegativeZero: isNegativeZero_1,
  extend: extend_1
};
function formatError(exception2, compact) {
  var where = "", message = exception2.reason || "(unknown reason)";
  if (!exception2.mark)
    return message;
  if (exception2.mark.name) {
    where += 'in "' + exception2.mark.name + '" ';
  }
  where += "(" + (exception2.mark.line + 1) + ":" + (exception2.mark.column + 1) + ")";
  if (!compact && exception2.mark.snippet) {
    where += "\n\n" + exception2.mark.snippet;
  }
  return message + " " + where;
}
function YAMLException$1(reason, mark) {
  Error.call(this);
  this.name = "YAMLException";
  this.reason = reason;
  this.mark = mark;
  this.message = formatError(this, false);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack || "";
  }
}
YAMLException$1.prototype = Object.create(Error.prototype);
YAMLException$1.prototype.constructor = YAMLException$1;
YAMLException$1.prototype.toString = function toString(compact) {
  return this.name + ": " + formatError(this, compact);
};
var exception = YAMLException$1;
function getLine(buffer, lineStart, lineEnd, position, maxLineLength) {
  var head = "";
  var tail = "";
  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;
  if (position - lineStart > maxHalfLength) {
    head = " ... ";
    lineStart = position - maxHalfLength + head.length;
  }
  if (lineEnd - position > maxHalfLength) {
    tail = " ...";
    lineEnd = position + maxHalfLength - tail.length;
  }
  return {
    str: head + buffer.slice(lineStart, lineEnd).replace(/\t/g, "\u2192") + tail,
    pos: position - lineStart + head.length
    // relative position
  };
}
function padStart(string, max) {
  return common.repeat(" ", max - string.length) + string;
}
function makeSnippet(mark, options) {
  options = Object.create(options || null);
  if (!mark.buffer)
    return null;
  if (!options.maxLength)
    options.maxLength = 79;
  if (typeof options.indent !== "number")
    options.indent = 1;
  if (typeof options.linesBefore !== "number")
    options.linesBefore = 3;
  if (typeof options.linesAfter !== "number")
    options.linesAfter = 2;
  var re = /\r?\n|\r|\0/g;
  var lineStarts = [0];
  var lineEnds = [];
  var match;
  var foundLineNo = -1;
  while (match = re.exec(mark.buffer)) {
    lineEnds.push(match.index);
    lineStarts.push(match.index + match[0].length);
    if (mark.position <= match.index && foundLineNo < 0) {
      foundLineNo = lineStarts.length - 2;
    }
  }
  if (foundLineNo < 0)
    foundLineNo = lineStarts.length - 1;
  var result = "", i, line;
  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;
  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);
  for (i = 1; i <= options.linesBefore; i++) {
    if (foundLineNo - i < 0)
      break;
    line = getLine(
      mark.buffer,
      lineStarts[foundLineNo - i],
      lineEnds[foundLineNo - i],
      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),
      maxLineLength
    );
    result = common.repeat(" ", options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) + " | " + line.str + "\n" + result;
  }
  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);
  result += common.repeat(" ", options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + " | " + line.str + "\n";
  result += common.repeat("-", options.indent + lineNoLength + 3 + line.pos) + "^\n";
  for (i = 1; i <= options.linesAfter; i++) {
    if (foundLineNo + i >= lineEnds.length)
      break;
    line = getLine(
      mark.buffer,
      lineStarts[foundLineNo + i],
      lineEnds[foundLineNo + i],
      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),
      maxLineLength
    );
    result += common.repeat(" ", options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) + " | " + line.str + "\n";
  }
  return result.replace(/\n$/, "");
}
var snippet = makeSnippet;
var TYPE_CONSTRUCTOR_OPTIONS = [
  "kind",
  "multi",
  "resolve",
  "construct",
  "instanceOf",
  "predicate",
  "represent",
  "representName",
  "defaultStyle",
  "styleAliases"
];
var YAML_NODE_KINDS = [
  "scalar",
  "sequence",
  "mapping"
];
function compileStyleAliases(map2) {
  var result = {};
  if (map2 !== null) {
    Object.keys(map2).forEach(function(style) {
      map2[style].forEach(function(alias) {
        result[String(alias)] = style;
      });
    });
  }
  return result;
}
function Type$1(tag, options) {
  options = options || {};
  Object.keys(options).forEach(function(name) {
    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
      throw new exception('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
    }
  });
  this.options = options;
  this.tag = tag;
  this.kind = options["kind"] || null;
  this.resolve = options["resolve"] || function() {
    return true;
  };
  this.construct = options["construct"] || function(data) {
    return data;
  };
  this.instanceOf = options["instanceOf"] || null;
  this.predicate = options["predicate"] || null;
  this.represent = options["represent"] || null;
  this.representName = options["representName"] || null;
  this.defaultStyle = options["defaultStyle"] || null;
  this.multi = options["multi"] || false;
  this.styleAliases = compileStyleAliases(options["styleAliases"] || null);
  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
    throw new exception('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
  }
}
var type = Type$1;
function compileList(schema2, name) {
  var result = [];
  schema2[name].forEach(function(currentType) {
    var newIndex = result.length;
    result.forEach(function(previousType, previousIndex) {
      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) {
        newIndex = previousIndex;
      }
    });
    result[newIndex] = currentType;
  });
  return result;
}
function compileMap() {
  var result = {
    scalar: {},
    sequence: {},
    mapping: {},
    fallback: {},
    multi: {
      scalar: [],
      sequence: [],
      mapping: [],
      fallback: []
    }
  }, index, length;
  function collectType(type2) {
    if (type2.multi) {
      result.multi[type2.kind].push(type2);
      result.multi["fallback"].push(type2);
    } else {
      result[type2.kind][type2.tag] = result["fallback"][type2.tag] = type2;
    }
  }
  for (index = 0, length = arguments.length; index < length; index += 1) {
    arguments[index].forEach(collectType);
  }
  return result;
}
function Schema$1(definition) {
  return this.extend(definition);
}
Schema$1.prototype.extend = function extend2(definition) {
  var implicit = [];
  var explicit = [];
  if (definition instanceof type) {
    explicit.push(definition);
  } else if (Array.isArray(definition)) {
    explicit = explicit.concat(definition);
  } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
    if (definition.implicit)
      implicit = implicit.concat(definition.implicit);
    if (definition.explicit)
      explicit = explicit.concat(definition.explicit);
  } else {
    throw new exception("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");
  }
  implicit.forEach(function(type$1) {
    if (!(type$1 instanceof type)) {
      throw new exception("Specified list of YAML types (or a single Type object) contains a non-Type object.");
    }
    if (type$1.loadKind && type$1.loadKind !== "scalar") {
      throw new exception("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
    }
    if (type$1.multi) {
      throw new exception("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.");
    }
  });
  explicit.forEach(function(type$1) {
    if (!(type$1 instanceof type)) {
      throw new exception("Specified list of YAML types (or a single Type object) contains a non-Type object.");
    }
  });
  var result = Object.create(Schema$1.prototype);
  result.implicit = (this.implicit || []).concat(implicit);
  result.explicit = (this.explicit || []).concat(explicit);
  result.compiledImplicit = compileList(result, "implicit");
  result.compiledExplicit = compileList(result, "explicit");
  result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);
  return result;
};
var schema = Schema$1;
var str = new type("tag:yaml.org,2002:str", {
  kind: "scalar",
  construct: function(data) {
    return data !== null ? data : "";
  }
});
var seq = new type("tag:yaml.org,2002:seq", {
  kind: "sequence",
  construct: function(data) {
    return data !== null ? data : [];
  }
});
var map = new type("tag:yaml.org,2002:map", {
  kind: "mapping",
  construct: function(data) {
    return data !== null ? data : {};
  }
});
var failsafe = new schema({
  explicit: [
    str,
    seq,
    map
  ]
});
function resolveYamlNull(data) {
  if (data === null)
    return true;
  var max = data.length;
  return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
}
function constructYamlNull() {
  return null;
}
function isNull(object) {
  return object === null;
}
var _null = new type("tag:yaml.org,2002:null", {
  kind: "scalar",
  resolve: resolveYamlNull,
  construct: constructYamlNull,
  predicate: isNull,
  represent: {
    canonical: function() {
      return "~";
    },
    lowercase: function() {
      return "null";
    },
    uppercase: function() {
      return "NULL";
    },
    camelcase: function() {
      return "Null";
    },
    empty: function() {
      return "";
    }
  },
  defaultStyle: "lowercase"
});
function resolveYamlBoolean(data) {
  if (data === null)
    return false;
  var max = data.length;
  return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
}
function constructYamlBoolean(data) {
  return data === "true" || data === "True" || data === "TRUE";
}
function isBoolean(object) {
  return Object.prototype.toString.call(object) === "[object Boolean]";
}
var bool = new type("tag:yaml.org,2002:bool", {
  kind: "scalar",
  resolve: resolveYamlBoolean,
  construct: constructYamlBoolean,
  predicate: isBoolean,
  represent: {
    lowercase: function(object) {
      return object ? "true" : "false";
    },
    uppercase: function(object) {
      return object ? "TRUE" : "FALSE";
    },
    camelcase: function(object) {
      return object ? "True" : "False";
    }
  },
  defaultStyle: "lowercase"
});
function isHexCode(c) {
  return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
}
function isOctCode(c) {
  return 48 <= c && c <= 55;
}
function isDecCode(c) {
  return 48 <= c && c <= 57;
}
function resolveYamlInteger(data) {
  if (data === null)
    return false;
  var max = data.length, index = 0, hasDigits = false, ch;
  if (!max)
    return false;
  ch = data[index];
  if (ch === "-" || ch === "+") {
    ch = data[++index];
  }
  if (ch === "0") {
    if (index + 1 === max)
      return true;
    ch = data[++index];
    if (ch === "b") {
      index++;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_")
          continue;
        if (ch !== "0" && ch !== "1")
          return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
    if (ch === "x") {
      index++;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_")
          continue;
        if (!isHexCode(data.charCodeAt(index)))
          return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
    if (ch === "o") {
      index++;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_")
          continue;
        if (!isOctCode(data.charCodeAt(index)))
          return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
  }
  if (ch === "_")
    return false;
  for (; index < max; index++) {
    ch = data[index];
    if (ch === "_")
      continue;
    if (!isDecCode(data.charCodeAt(index))) {
      return false;
    }
    hasDigits = true;
  }
  if (!hasDigits || ch === "_")
    return false;
  return true;
}
function constructYamlInteger(data) {
  var value = data, sign = 1, ch;
  if (value.indexOf("_") !== -1) {
    value = value.replace(/_/g, "");
  }
  ch = value[0];
  if (ch === "-" || ch === "+") {
    if (ch === "-")
      sign = -1;
    value = value.slice(1);
    ch = value[0];
  }
  if (value === "0")
    return 0;
  if (ch === "0") {
    if (value[1] === "b")
      return sign * parseInt(value.slice(2), 2);
    if (value[1] === "x")
      return sign * parseInt(value.slice(2), 16);
    if (value[1] === "o")
      return sign * parseInt(value.slice(2), 8);
  }
  return sign * parseInt(value, 10);
}
function isInteger(object) {
  return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 === 0 && !common.isNegativeZero(object));
}
var int = new type("tag:yaml.org,2002:int", {
  kind: "scalar",
  resolve: resolveYamlInteger,
  construct: constructYamlInteger,
  predicate: isInteger,
  represent: {
    binary: function(obj) {
      return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
    },
    octal: function(obj) {
      return obj >= 0 ? "0o" + obj.toString(8) : "-0o" + obj.toString(8).slice(1);
    },
    decimal: function(obj) {
      return obj.toString(10);
    },
    /* eslint-disable max-len */
    hexadecimal: function(obj) {
      return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
    }
  },
  defaultStyle: "decimal",
  styleAliases: {
    binary: [2, "bin"],
    octal: [8, "oct"],
    decimal: [10, "dec"],
    hexadecimal: [16, "hex"]
  }
});
var YAML_FLOAT_PATTERN = new RegExp(
  // 2.5e4, 2.5 and integers
  "^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"
);
function resolveYamlFloat(data) {
  if (data === null)
    return false;
  if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`
  // Probably should update regexp & check speed
  data[data.length - 1] === "_") {
    return false;
  }
  return true;
}
function constructYamlFloat(data) {
  var value, sign;
  value = data.replace(/_/g, "").toLowerCase();
  sign = value[0] === "-" ? -1 : 1;
  if ("+-".indexOf(value[0]) >= 0) {
    value = value.slice(1);
  }
  if (value === ".inf") {
    return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
  } else if (value === ".nan") {
    return NaN;
  }
  return sign * parseFloat(value, 10);
}
var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
function representYamlFloat(object, style) {
  var res;
  if (isNaN(object)) {
    switch (style) {
      case "lowercase":
        return ".nan";
      case "uppercase":
        return ".NAN";
      case "camelcase":
        return ".NaN";
    }
  } else if (Number.POSITIVE_INFINITY === object) {
    switch (style) {
      case "lowercase":
        return ".inf";
      case "uppercase":
        return ".INF";
      case "camelcase":
        return ".Inf";
    }
  } else if (Number.NEGATIVE_INFINITY === object) {
    switch (style) {
      case "lowercase":
        return "-.inf";
      case "uppercase":
        return "-.INF";
      case "camelcase":
        return "-.Inf";
    }
  } else if (common.isNegativeZero(object)) {
    return "-0.0";
  }
  res = object.toString(10);
  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
}
function isFloat(object) {
  return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common.isNegativeZero(object));
}
var float = new type("tag:yaml.org,2002:float", {
  kind: "scalar",
  resolve: resolveYamlFloat,
  construct: constructYamlFloat,
  predicate: isFloat,
  represent: representYamlFloat,
  defaultStyle: "lowercase"
});
var json = failsafe.extend({
  implicit: [
    _null,
    bool,
    int,
    float
  ]
});
var core = json;
var YAML_DATE_REGEXP = new RegExp(
  "^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"
);
var YAML_TIMESTAMP_REGEXP = new RegExp(
  "^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$"
);
function resolveYamlTimestamp(data) {
  if (data === null)
    return false;
  if (YAML_DATE_REGEXP.exec(data) !== null)
    return true;
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null)
    return true;
  return false;
}
function constructYamlTimestamp(data) {
  var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
  match = YAML_DATE_REGEXP.exec(data);
  if (match === null)
    match = YAML_TIMESTAMP_REGEXP.exec(data);
  if (match === null)
    throw new Error("Date resolve error");
  year = +match[1];
  month = +match[2] - 1;
  day = +match[3];
  if (!match[4]) {
    return new Date(Date.UTC(year, month, day));
  }
  hour = +match[4];
  minute = +match[5];
  second = +match[6];
  if (match[7]) {
    fraction = match[7].slice(0, 3);
    while (fraction.length < 3) {
      fraction += "0";
    }
    fraction = +fraction;
  }
  if (match[9]) {
    tz_hour = +match[10];
    tz_minute = +(match[11] || 0);
    delta = (tz_hour * 60 + tz_minute) * 6e4;
    if (match[9] === "-")
      delta = -delta;
  }
  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
  if (delta)
    date.setTime(date.getTime() - delta);
  return date;
}
function representYamlTimestamp(object) {
  return object.toISOString();
}
var timestamp = new type("tag:yaml.org,2002:timestamp", {
  kind: "scalar",
  resolve: resolveYamlTimestamp,
  construct: constructYamlTimestamp,
  instanceOf: Date,
  represent: representYamlTimestamp
});
function resolveYamlMerge(data) {
  return data === "<<" || data === null;
}
var merge = new type("tag:yaml.org,2002:merge", {
  kind: "scalar",
  resolve: resolveYamlMerge
});
var BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
function resolveYamlBinary(data) {
  if (data === null)
    return false;
  var code, idx, bitlen = 0, max = data.length, map2 = BASE64_MAP;
  for (idx = 0; idx < max; idx++) {
    code = map2.indexOf(data.charAt(idx));
    if (code > 64)
      continue;
    if (code < 0)
      return false;
    bitlen += 6;
  }
  return bitlen % 8 === 0;
}
function constructYamlBinary(data) {
  var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max = input.length, map2 = BASE64_MAP, bits = 0, result = [];
  for (idx = 0; idx < max; idx++) {
    if (idx % 4 === 0 && idx) {
      result.push(bits >> 16 & 255);
      result.push(bits >> 8 & 255);
      result.push(bits & 255);
    }
    bits = bits << 6 | map2.indexOf(input.charAt(idx));
  }
  tailbits = max % 4 * 6;
  if (tailbits === 0) {
    result.push(bits >> 16 & 255);
    result.push(bits >> 8 & 255);
    result.push(bits & 255);
  } else if (tailbits === 18) {
    result.push(bits >> 10 & 255);
    result.push(bits >> 2 & 255);
  } else if (tailbits === 12) {
    result.push(bits >> 4 & 255);
  }
  return new Uint8Array(result);
}
function representYamlBinary(object) {
  var result = "", bits = 0, idx, tail, max = object.length, map2 = BASE64_MAP;
  for (idx = 0; idx < max; idx++) {
    if (idx % 3 === 0 && idx) {
      result += map2[bits >> 18 & 63];
      result += map2[bits >> 12 & 63];
      result += map2[bits >> 6 & 63];
      result += map2[bits & 63];
    }
    bits = (bits << 8) + object[idx];
  }
  tail = max % 3;
  if (tail === 0) {
    result += map2[bits >> 18 & 63];
    result += map2[bits >> 12 & 63];
    result += map2[bits >> 6 & 63];
    result += map2[bits & 63];
  } else if (tail === 2) {
    result += map2[bits >> 10 & 63];
    result += map2[bits >> 4 & 63];
    result += map2[bits << 2 & 63];
    result += map2[64];
  } else if (tail === 1) {
    result += map2[bits >> 2 & 63];
    result += map2[bits << 4 & 63];
    result += map2[64];
    result += map2[64];
  }
  return result;
}
function isBinary(obj) {
  return Object.prototype.toString.call(obj) === "[object Uint8Array]";
}
var binary = new type("tag:yaml.org,2002:binary", {
  kind: "scalar",
  resolve: resolveYamlBinary,
  construct: constructYamlBinary,
  predicate: isBinary,
  represent: representYamlBinary
});
var _hasOwnProperty$3 = Object.prototype.hasOwnProperty;
var _toString$2 = Object.prototype.toString;
function resolveYamlOmap(data) {
  if (data === null)
    return true;
  var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;
  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    pairHasKey = false;
    if (_toString$2.call(pair) !== "[object Object]")
      return false;
    for (pairKey in pair) {
      if (_hasOwnProperty$3.call(pair, pairKey)) {
        if (!pairHasKey)
          pairHasKey = true;
        else
          return false;
      }
    }
    if (!pairHasKey)
      return false;
    if (objectKeys.indexOf(pairKey) === -1)
      objectKeys.push(pairKey);
    else
      return false;
  }
  return true;
}
function constructYamlOmap(data) {
  return data !== null ? data : [];
}
var omap = new type("tag:yaml.org,2002:omap", {
  kind: "sequence",
  resolve: resolveYamlOmap,
  construct: constructYamlOmap
});
var _toString$1 = Object.prototype.toString;
function resolveYamlPairs(data) {
  if (data === null)
    return true;
  var index, length, pair, keys, result, object = data;
  result = new Array(object.length);
  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    if (_toString$1.call(pair) !== "[object Object]")
      return false;
    keys = Object.keys(pair);
    if (keys.length !== 1)
      return false;
    result[index] = [keys[0], pair[keys[0]]];
  }
  return true;
}
function constructYamlPairs(data) {
  if (data === null)
    return [];
  var index, length, pair, keys, result, object = data;
  result = new Array(object.length);
  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    keys = Object.keys(pair);
    result[index] = [keys[0], pair[keys[0]]];
  }
  return result;
}
var pairs = new type("tag:yaml.org,2002:pairs", {
  kind: "sequence",
  resolve: resolveYamlPairs,
  construct: constructYamlPairs
});
var _hasOwnProperty$2 = Object.prototype.hasOwnProperty;
function resolveYamlSet(data) {
  if (data === null)
    return true;
  var key, object = data;
  for (key in object) {
    if (_hasOwnProperty$2.call(object, key)) {
      if (object[key] !== null)
        return false;
    }
  }
  return true;
}
function constructYamlSet(data) {
  return data !== null ? data : {};
}
var set = new type("tag:yaml.org,2002:set", {
  kind: "mapping",
  resolve: resolveYamlSet,
  construct: constructYamlSet
});
var _default = core.extend({
  implicit: [
    timestamp,
    merge
  ],
  explicit: [
    binary,
    omap,
    pairs,
    set
  ]
});
var _hasOwnProperty$1 = Object.prototype.hasOwnProperty;
var CONTEXT_FLOW_IN = 1;
var CONTEXT_FLOW_OUT = 2;
var CONTEXT_BLOCK_IN = 3;
var CONTEXT_BLOCK_OUT = 4;
var CHOMPING_CLIP = 1;
var CHOMPING_STRIP = 2;
var CHOMPING_KEEP = 3;
var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
function _class(obj) {
  return Object.prototype.toString.call(obj);
}
function is_EOL(c) {
  return c === 10 || c === 13;
}
function is_WHITE_SPACE(c) {
  return c === 9 || c === 32;
}
function is_WS_OR_EOL(c) {
  return c === 9 || c === 32 || c === 10 || c === 13;
}
function is_FLOW_INDICATOR(c) {
  return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
}
function fromHexCode(c) {
  var lc;
  if (48 <= c && c <= 57) {
    return c - 48;
  }
  lc = c | 32;
  if (97 <= lc && lc <= 102) {
    return lc - 97 + 10;
  }
  return -1;
}
function escapedHexLen(c) {
  if (c === 120) {
    return 2;
  }
  if (c === 117) {
    return 4;
  }
  if (c === 85) {
    return 8;
  }
  return 0;
}
function fromDecimalCode(c) {
  if (48 <= c && c <= 57) {
    return c - 48;
  }
  return -1;
}
function simpleEscapeSequence(c) {
  return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "	" : c === 9 ? "	" : c === 110 ? "\n" : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? '"' : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "\x85" : c === 95 ? "\xA0" : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
}
function charFromCodepoint(c) {
  if (c <= 65535) {
    return String.fromCharCode(c);
  }
  return String.fromCharCode(
    (c - 65536 >> 10) + 55296,
    (c - 65536 & 1023) + 56320
  );
}
var simpleEscapeCheck = new Array(256);
var simpleEscapeMap = new Array(256);
for (i = 0; i < 256; i++) {
  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
  simpleEscapeMap[i] = simpleEscapeSequence(i);
}
var i;
function State$1(input, options) {
  this.input = input;
  this.filename = options["filename"] || null;
  this.schema = options["schema"] || _default;
  this.onWarning = options["onWarning"] || null;
  this.legacy = options["legacy"] || false;
  this.json = options["json"] || false;
  this.listener = options["listener"] || null;
  this.implicitTypes = this.schema.compiledImplicit;
  this.typeMap = this.schema.compiledTypeMap;
  this.length = input.length;
  this.position = 0;
  this.line = 0;
  this.lineStart = 0;
  this.lineIndent = 0;
  this.firstTabInLine = -1;
  this.documents = [];
}
function generateError(state, message) {
  var mark = {
    name: state.filename,
    buffer: state.input.slice(0, -1),
    // omit trailing \0
    position: state.position,
    line: state.line,
    column: state.position - state.lineStart
  };
  mark.snippet = snippet(mark);
  return new exception(message, mark);
}
function throwError(state, message) {
  throw generateError(state, message);
}
function throwWarning(state, message) {
  if (state.onWarning) {
    state.onWarning.call(null, generateError(state, message));
  }
}
var directiveHandlers = {
  YAML: function handleYamlDirective(state, name, args) {
    var match, major, minor;
    if (state.version !== null) {
      throwError(state, "duplication of %YAML directive");
    }
    if (args.length !== 1) {
      throwError(state, "YAML directive accepts exactly one argument");
    }
    match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
    if (match === null) {
      throwError(state, "ill-formed argument of the YAML directive");
    }
    major = parseInt(match[1], 10);
    minor = parseInt(match[2], 10);
    if (major !== 1) {
      throwError(state, "unacceptable YAML version of the document");
    }
    state.version = args[0];
    state.checkLineBreaks = minor < 2;
    if (minor !== 1 && minor !== 2) {
      throwWarning(state, "unsupported YAML version of the document");
    }
  },
  TAG: function handleTagDirective(state, name, args) {
    var handle, prefix;
    if (args.length !== 2) {
      throwError(state, "TAG directive accepts exactly two arguments");
    }
    handle = args[0];
    prefix = args[1];
    if (!PATTERN_TAG_HANDLE.test(handle)) {
      throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
    }
    if (_hasOwnProperty$1.call(state.tagMap, handle)) {
      throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
    }
    if (!PATTERN_TAG_URI.test(prefix)) {
      throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
    }
    try {
      prefix = decodeURIComponent(prefix);
    } catch (err) {
      throwError(state, "tag prefix is malformed: " + prefix);
    }
    state.tagMap[handle] = prefix;
  }
};
function captureSegment(state, start, end, checkJson) {
  var _position, _length, _character, _result;
  if (start < end) {
    _result = state.input.slice(start, end);
    if (checkJson) {
      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
        _character = _result.charCodeAt(_position);
        if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
          throwError(state, "expected valid JSON character");
        }
      }
    } else if (PATTERN_NON_PRINTABLE.test(_result)) {
      throwError(state, "the stream contains non-printable characters");
    }
    state.result += _result;
  }
}
function mergeMappings(state, destination, source, overridableKeys) {
  var sourceKeys, key, index, quantity;
  if (!common.isObject(source)) {
    throwError(state, "cannot merge mappings; the provided source object is unacceptable");
  }
  sourceKeys = Object.keys(source);
  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
    key = sourceKeys[index];
    if (!_hasOwnProperty$1.call(destination, key)) {
      destination[key] = source[key];
      overridableKeys[key] = true;
    }
  }
}
function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {
  var index, quantity;
  if (Array.isArray(keyNode)) {
    keyNode = Array.prototype.slice.call(keyNode);
    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
      if (Array.isArray(keyNode[index])) {
        throwError(state, "nested arrays are not supported inside keys");
      }
      if (typeof keyNode === "object" && _class(keyNode[index]) === "[object Object]") {
        keyNode[index] = "[object Object]";
      }
    }
  }
  if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
    keyNode = "[object Object]";
  }
  keyNode = String(keyNode);
  if (_result === null) {
    _result = {};
  }
  if (keyTag === "tag:yaml.org,2002:merge") {
    if (Array.isArray(valueNode)) {
      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
        mergeMappings(state, _result, valueNode[index], overridableKeys);
      }
    } else {
      mergeMappings(state, _result, valueNode, overridableKeys);
    }
  } else {
    if (!state.json && !_hasOwnProperty$1.call(overridableKeys, keyNode) && _hasOwnProperty$1.call(_result, keyNode)) {
      state.line = startLine || state.line;
      state.lineStart = startLineStart || state.lineStart;
      state.position = startPos || state.position;
      throwError(state, "duplicated mapping key");
    }
    if (keyNode === "__proto__") {
      Object.defineProperty(_result, keyNode, {
        configurable: true,
        enumerable: true,
        writable: true,
        value: valueNode
      });
    } else {
      _result[keyNode] = valueNode;
    }
    delete overridableKeys[keyNode];
  }
  return _result;
}
function readLineBreak(state) {
  var ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 10) {
    state.position++;
  } else if (ch === 13) {
    state.position++;
    if (state.input.charCodeAt(state.position) === 10) {
      state.position++;
    }
  } else {
    throwError(state, "a line break is expected");
  }
  state.line += 1;
  state.lineStart = state.position;
  state.firstTabInLine = -1;
}
function skipSeparationSpace(state, allowComments, checkIndent) {
  var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    while (is_WHITE_SPACE(ch)) {
      if (ch === 9 && state.firstTabInLine === -1) {
        state.firstTabInLine = state.position;
      }
      ch = state.input.charCodeAt(++state.position);
    }
    if (allowComments && ch === 35) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 10 && ch !== 13 && ch !== 0);
    }
    if (is_EOL(ch)) {
      readLineBreak(state);
      ch = state.input.charCodeAt(state.position);
      lineBreaks++;
      state.lineIndent = 0;
      while (ch === 32) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
    } else {
      break;
    }
  }
  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
    throwWarning(state, "deficient indentation");
  }
  return lineBreaks;
}
function testDocumentSeparator(state) {
  var _position = state.position, ch;
  ch = state.input.charCodeAt(_position);
  if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
    _position += 3;
    ch = state.input.charCodeAt(_position);
    if (ch === 0 || is_WS_OR_EOL(ch)) {
      return true;
    }
  }
  return false;
}
function writeFoldedLines(state, count) {
  if (count === 1) {
    state.result += " ";
  } else if (count > 1) {
    state.result += common.repeat("\n", count - 1);
  }
}
function readPlainScalar(state, nodeIndent, withinFlowCollection) {
  var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
  ch = state.input.charCodeAt(state.position);
  if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
    return false;
  }
  if (ch === 63 || ch === 45) {
    following = state.input.charCodeAt(state.position + 1);
    if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
      return false;
    }
  }
  state.kind = "scalar";
  state.result = "";
  captureStart = captureEnd = state.position;
  hasPendingContent = false;
  while (ch !== 0) {
    if (ch === 58) {
      following = state.input.charCodeAt(state.position + 1);
      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
        break;
      }
    } else if (ch === 35) {
      preceding = state.input.charCodeAt(state.position - 1);
      if (is_WS_OR_EOL(preceding)) {
        break;
      }
    } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
      break;
    } else if (is_EOL(ch)) {
      _line = state.line;
      _lineStart = state.lineStart;
      _lineIndent = state.lineIndent;
      skipSeparationSpace(state, false, -1);
      if (state.lineIndent >= nodeIndent) {
        hasPendingContent = true;
        ch = state.input.charCodeAt(state.position);
        continue;
      } else {
        state.position = captureEnd;
        state.line = _line;
        state.lineStart = _lineStart;
        state.lineIndent = _lineIndent;
        break;
      }
    }
    if (hasPendingContent) {
      captureSegment(state, captureStart, captureEnd, false);
      writeFoldedLines(state, state.line - _line);
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
    }
    if (!is_WHITE_SPACE(ch)) {
      captureEnd = state.position + 1;
    }
    ch = state.input.charCodeAt(++state.position);
  }
  captureSegment(state, captureStart, captureEnd, false);
  if (state.result) {
    return true;
  }
  state.kind = _kind;
  state.result = _result;
  return false;
}
function readSingleQuotedScalar(state, nodeIndent) {
  var ch, captureStart, captureEnd;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 39) {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  state.position++;
  captureStart = captureEnd = state.position;
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 39) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);
      if (ch === 39) {
        captureStart = state.position;
        state.position++;
        captureEnd = state.position;
      } else {
        return true;
      }
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, "unexpected end of the document within a single quoted scalar");
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }
  throwError(state, "unexpected end of the stream within a single quoted scalar");
}
function readDoubleQuotedScalar(state, nodeIndent) {
  var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 34) {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  state.position++;
  captureStart = captureEnd = state.position;
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 34) {
      captureSegment(state, captureStart, state.position, true);
      state.position++;
      return true;
    } else if (ch === 92) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);
      if (is_EOL(ch)) {
        skipSeparationSpace(state, false, nodeIndent);
      } else if (ch < 256 && simpleEscapeCheck[ch]) {
        state.result += simpleEscapeMap[ch];
        state.position++;
      } else if ((tmp = escapedHexLen(ch)) > 0) {
        hexLength = tmp;
        hexResult = 0;
        for (; hexLength > 0; hexLength--) {
          ch = state.input.charCodeAt(++state.position);
          if ((tmp = fromHexCode(ch)) >= 0) {
            hexResult = (hexResult << 4) + tmp;
          } else {
            throwError(state, "expected hexadecimal character");
          }
        }
        state.result += charFromCodepoint(hexResult);
        state.position++;
      } else {
        throwError(state, "unknown escape sequence");
      }
      captureStart = captureEnd = state.position;
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, "unexpected end of the document within a double quoted scalar");
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }
  throwError(state, "unexpected end of the stream within a double quoted scalar");
}
function readFlowCollection(state, nodeIndent) {
  var readNext = true, _line, _lineStart, _pos, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = /* @__PURE__ */ Object.create(null), keyNode, keyTag, valueNode, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 91) {
    terminator = 93;
    isMapping = false;
    _result = [];
  } else if (ch === 123) {
    terminator = 125;
    isMapping = true;
    _result = {};
  } else {
    return false;
  }
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(++state.position);
  while (ch !== 0) {
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if (ch === terminator) {
      state.position++;
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = isMapping ? "mapping" : "sequence";
      state.result = _result;
      return true;
    } else if (!readNext) {
      throwError(state, "missed comma between flow collection entries");
    } else if (ch === 44) {
      throwError(state, "expected the node content, but found ','");
    }
    keyTag = keyNode = valueNode = null;
    isPair = isExplicitPair = false;
    if (ch === 63) {
      following = state.input.charCodeAt(state.position + 1);
      if (is_WS_OR_EOL(following)) {
        isPair = isExplicitPair = true;
        state.position++;
        skipSeparationSpace(state, true, nodeIndent);
      }
    }
    _line = state.line;
    _lineStart = state.lineStart;
    _pos = state.position;
    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
    keyTag = state.tag;
    keyNode = state.result;
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if ((isExplicitPair || state.line === _line) && ch === 58) {
      isPair = true;
      ch = state.input.charCodeAt(++state.position);
      skipSeparationSpace(state, true, nodeIndent);
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
      valueNode = state.result;
    }
    if (isMapping) {
      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
    } else if (isPair) {
      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
    } else {
      _result.push(keyNode);
    }
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if (ch === 44) {
      readNext = true;
      ch = state.input.charCodeAt(++state.position);
    } else {
      readNext = false;
    }
  }
  throwError(state, "unexpected end of the stream within a flow collection");
}
function readBlockScalar(state, nodeIndent) {
  var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 124) {
    folding = false;
  } else if (ch === 62) {
    folding = true;
  } else {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  while (ch !== 0) {
    ch = state.input.charCodeAt(++state.position);
    if (ch === 43 || ch === 45) {
      if (CHOMPING_CLIP === chomping) {
        chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
      } else {
        throwError(state, "repeat of a chomping mode identifier");
      }
    } else if ((tmp = fromDecimalCode(ch)) >= 0) {
      if (tmp === 0) {
        throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
      } else if (!detectedIndent) {
        textIndent = nodeIndent + tmp - 1;
        detectedIndent = true;
      } else {
        throwError(state, "repeat of an indentation width identifier");
      }
    } else {
      break;
    }
  }
  if (is_WHITE_SPACE(ch)) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (is_WHITE_SPACE(ch));
    if (ch === 35) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (!is_EOL(ch) && ch !== 0);
    }
  }
  while (ch !== 0) {
    readLineBreak(state);
    state.lineIndent = 0;
    ch = state.input.charCodeAt(state.position);
    while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
      state.lineIndent++;
      ch = state.input.charCodeAt(++state.position);
    }
    if (!detectedIndent && state.lineIndent > textIndent) {
      textIndent = state.lineIndent;
    }
    if (is_EOL(ch)) {
      emptyLines++;
      continue;
    }
    if (state.lineIndent < textIndent) {
      if (chomping === CHOMPING_KEEP) {
        state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
      } else if (chomping === CHOMPING_CLIP) {
        if (didReadContent) {
          state.result += "\n";
        }
      }
      break;
    }
    if (folding) {
      if (is_WHITE_SPACE(ch)) {
        atMoreIndented = true;
        state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
      } else if (atMoreIndented) {
        atMoreIndented = false;
        state.result += common.repeat("\n", emptyLines + 1);
      } else if (emptyLines === 0) {
        if (didReadContent) {
          state.result += " ";
        }
      } else {
        state.result += common.repeat("\n", emptyLines);
      }
    } else {
      state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
    }
    didReadContent = true;
    detectedIndent = true;
    emptyLines = 0;
    captureStart = state.position;
    while (!is_EOL(ch) && ch !== 0) {
      ch = state.input.charCodeAt(++state.position);
    }
    captureSegment(state, captureStart, state.position, false);
  }
  return true;
}
function readBlockSequence(state, nodeIndent) {
  var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
  if (state.firstTabInLine !== -1)
    return false;
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    if (state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, "tab characters must not be used in indentation");
    }
    if (ch !== 45) {
      break;
    }
    following = state.input.charCodeAt(state.position + 1);
    if (!is_WS_OR_EOL(following)) {
      break;
    }
    detected = true;
    state.position++;
    if (skipSeparationSpace(state, true, -1)) {
      if (state.lineIndent <= nodeIndent) {
        _result.push(null);
        ch = state.input.charCodeAt(state.position);
        continue;
      }
    }
    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
    _result.push(state.result);
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);
    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, "bad indentation of a sequence entry");
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = "sequence";
    state.result = _result;
    return true;
  }
  return false;
}
function readBlockMapping(state, nodeIndent, flowIndent) {
  var following, allowCompact, _line, _keyLine, _keyLineStart, _keyPos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = /* @__PURE__ */ Object.create(null), keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
  if (state.firstTabInLine !== -1)
    return false;
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    if (!atExplicitKey && state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, "tab characters must not be used in indentation");
    }
    following = state.input.charCodeAt(state.position + 1);
    _line = state.line;
    if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
      if (ch === 63) {
        if (atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
          keyTag = keyNode = valueNode = null;
        }
        detected = true;
        atExplicitKey = true;
        allowCompact = true;
      } else if (atExplicitKey) {
        atExplicitKey = false;
        allowCompact = true;
      } else {
        throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
      }
      state.position += 1;
      ch = following;
    } else {
      _keyLine = state.line;
      _keyLineStart = state.lineStart;
      _keyPos = state.position;
      if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
        break;
      }
      if (state.line === _line) {
        ch = state.input.charCodeAt(state.position);
        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (ch === 58) {
          ch = state.input.charCodeAt(++state.position);
          if (!is_WS_OR_EOL(ch)) {
            throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
          }
          if (atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
            keyTag = keyNode = valueNode = null;
          }
          detected = true;
          atExplicitKey = false;
          allowCompact = false;
          keyTag = state.tag;
          keyNode = state.result;
        } else if (detected) {
          throwError(state, "can not read an implicit mapping pair; a colon is missed");
        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true;
        }
      } else if (detected) {
        throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
      } else {
        state.tag = _tag;
        state.anchor = _anchor;
        return true;
      }
    }
    if (state.line === _line || state.lineIndent > nodeIndent) {
      if (atExplicitKey) {
        _keyLine = state.line;
        _keyLineStart = state.lineStart;
        _keyPos = state.position;
      }
      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
        if (atExplicitKey) {
          keyNode = state.result;
        } else {
          valueNode = state.result;
        }
      }
      if (!atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
        keyTag = keyNode = valueNode = null;
      }
      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
    }
    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, "bad indentation of a mapping entry");
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }
  if (atExplicitKey) {
    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
  }
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = "mapping";
    state.result = _result;
  }
  return detected;
}
function readTagProperty(state) {
  var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 33)
    return false;
  if (state.tag !== null) {
    throwError(state, "duplication of a tag property");
  }
  ch = state.input.charCodeAt(++state.position);
  if (ch === 60) {
    isVerbatim = true;
    ch = state.input.charCodeAt(++state.position);
  } else if (ch === 33) {
    isNamed = true;
    tagHandle = "!!";
    ch = state.input.charCodeAt(++state.position);
  } else {
    tagHandle = "!";
  }
  _position = state.position;
  if (isVerbatim) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (ch !== 0 && ch !== 62);
    if (state.position < state.length) {
      tagName = state.input.slice(_position, state.position);
      ch = state.input.charCodeAt(++state.position);
    } else {
      throwError(state, "unexpected end of the stream within a verbatim tag");
    }
  } else {
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      if (ch === 33) {
        if (!isNamed) {
          tagHandle = state.input.slice(_position - 1, state.position + 1);
          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
            throwError(state, "named tag handle cannot contain such characters");
          }
          isNamed = true;
          _position = state.position + 1;
        } else {
          throwError(state, "tag suffix cannot contain exclamation marks");
        }
      }
      ch = state.input.charCodeAt(++state.position);
    }
    tagName = state.input.slice(_position, state.position);
    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
      throwError(state, "tag suffix cannot contain flow indicator characters");
    }
  }
  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
    throwError(state, "tag name cannot contain such characters: " + tagName);
  }
  try {
    tagName = decodeURIComponent(tagName);
  } catch (err) {
    throwError(state, "tag name is malformed: " + tagName);
  }
  if (isVerbatim) {
    state.tag = tagName;
  } else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) {
    state.tag = state.tagMap[tagHandle] + tagName;
  } else if (tagHandle === "!") {
    state.tag = "!" + tagName;
  } else if (tagHandle === "!!") {
    state.tag = "tag:yaml.org,2002:" + tagName;
  } else {
    throwError(state, 'undeclared tag handle "' + tagHandle + '"');
  }
  return true;
}
function readAnchorProperty(state) {
  var _position, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 38)
    return false;
  if (state.anchor !== null) {
    throwError(state, "duplication of an anchor property");
  }
  ch = state.input.charCodeAt(++state.position);
  _position = state.position;
  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }
  if (state.position === _position) {
    throwError(state, "name of an anchor node must contain at least one character");
  }
  state.anchor = state.input.slice(_position, state.position);
  return true;
}
function readAlias(state) {
  var _position, alias, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 42)
    return false;
  ch = state.input.charCodeAt(++state.position);
  _position = state.position;
  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }
  if (state.position === _position) {
    throwError(state, "name of an alias node must contain at least one character");
  }
  alias = state.input.slice(_position, state.position);
  if (!_hasOwnProperty$1.call(state.anchorMap, alias)) {
    throwError(state, 'unidentified alias "' + alias + '"');
  }
  state.result = state.anchorMap[alias];
  skipSeparationSpace(state, true, -1);
  return true;
}
function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
  var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, typeList, type2, flowIndent, blockIndent;
  if (state.listener !== null) {
    state.listener("open", state);
  }
  state.tag = null;
  state.anchor = null;
  state.kind = null;
  state.result = null;
  allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
  if (allowToSeek) {
    if (skipSeparationSpace(state, true, -1)) {
      atNewLine = true;
      if (state.lineIndent > parentIndent) {
        indentStatus = 1;
      } else if (state.lineIndent === parentIndent) {
        indentStatus = 0;
      } else if (state.lineIndent < parentIndent) {
        indentStatus = -1;
      }
    }
  }
  if (indentStatus === 1) {
    while (readTagProperty(state) || readAnchorProperty(state)) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        allowBlockCollections = allowBlockStyles;
        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      } else {
        allowBlockCollections = false;
      }
    }
  }
  if (allowBlockCollections) {
    allowBlockCollections = atNewLine || allowCompact;
  }
  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
      flowIndent = parentIndent;
    } else {
      flowIndent = parentIndent + 1;
    }
    blockIndent = state.position - state.lineStart;
    if (indentStatus === 1) {
      if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
        hasContent = true;
      } else {
        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
          hasContent = true;
        } else if (readAlias(state)) {
          hasContent = true;
          if (state.tag !== null || state.anchor !== null) {
            throwError(state, "alias node should not have any properties");
          }
        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
          hasContent = true;
          if (state.tag === null) {
            state.tag = "?";
          }
        }
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else if (indentStatus === 0) {
      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
    }
  }
  if (state.tag === null) {
    if (state.anchor !== null) {
      state.anchorMap[state.anchor] = state.result;
    }
  } else if (state.tag === "?") {
    if (state.result !== null && state.kind !== "scalar") {
      throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
    }
    for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
      type2 = state.implicitTypes[typeIndex];
      if (type2.resolve(state.result)) {
        state.result = type2.construct(state.result);
        state.tag = type2.tag;
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
        break;
      }
    }
  } else if (state.tag !== "!") {
    if (_hasOwnProperty$1.call(state.typeMap[state.kind || "fallback"], state.tag)) {
      type2 = state.typeMap[state.kind || "fallback"][state.tag];
    } else {
      type2 = null;
      typeList = state.typeMap.multi[state.kind || "fallback"];
      for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {
        if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
          type2 = typeList[typeIndex];
          break;
        }
      }
    }
    if (!type2) {
      throwError(state, "unknown tag !<" + state.tag + ">");
    }
    if (state.result !== null && type2.kind !== state.kind) {
      throwError(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type2.kind + '", not "' + state.kind + '"');
    }
    if (!type2.resolve(state.result, state.tag)) {
      throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
    } else {
      state.result = type2.construct(state.result, state.tag);
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = state.result;
      }
    }
  }
  if (state.listener !== null) {
    state.listener("close", state);
  }
  return state.tag !== null || state.anchor !== null || hasContent;
}
function readDocument(state) {
  var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
  state.version = null;
  state.checkLineBreaks = state.legacy;
  state.tagMap = /* @__PURE__ */ Object.create(null);
  state.anchorMap = /* @__PURE__ */ Object.create(null);
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);
    if (state.lineIndent > 0 || ch !== 37) {
      break;
    }
    hasDirectives = true;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }
    directiveName = state.input.slice(_position, state.position);
    directiveArgs = [];
    if (directiveName.length < 1) {
      throwError(state, "directive name must not be less than one character in length");
    }
    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (ch === 35) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && !is_EOL(ch));
        break;
      }
      if (is_EOL(ch))
        break;
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      directiveArgs.push(state.input.slice(_position, state.position));
    }
    if (ch !== 0)
      readLineBreak(state);
    if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) {
      directiveHandlers[directiveName](state, directiveName, directiveArgs);
    } else {
      throwWarning(state, 'unknown document directive "' + directiveName + '"');
    }
  }
  skipSeparationSpace(state, true, -1);
  if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
    state.position += 3;
    skipSeparationSpace(state, true, -1);
  } else if (hasDirectives) {
    throwError(state, "directives end mark is expected");
  }
  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
  skipSeparationSpace(state, true, -1);
  if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
    throwWarning(state, "non-ASCII line breaks are interpreted as content");
  }
  state.documents.push(state.result);
  if (state.position === state.lineStart && testDocumentSeparator(state)) {
    if (state.input.charCodeAt(state.position) === 46) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    }
    return;
  }
  if (state.position < state.length - 1) {
    throwError(state, "end of the stream or a document separator is expected");
  } else {
    return;
  }
}
function loadDocuments(input, options) {
  input = String(input);
  options = options || {};
  if (input.length !== 0) {
    if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
      input += "\n";
    }
    if (input.charCodeAt(0) === 65279) {
      input = input.slice(1);
    }
  }
  var state = new State$1(input, options);
  var nullpos = input.indexOf("\0");
  if (nullpos !== -1) {
    state.position = nullpos;
    throwError(state, "null byte is not allowed in input");
  }
  state.input += "\0";
  while (state.input.charCodeAt(state.position) === 32) {
    state.lineIndent += 1;
    state.position += 1;
  }
  while (state.position < state.length - 1) {
    readDocument(state);
  }
  return state.documents;
}
function loadAll$1(input, iterator, options) {
  if (iterator !== null && typeof iterator === "object" && typeof options === "undefined") {
    options = iterator;
    iterator = null;
  }
  var documents = loadDocuments(input, options);
  if (typeof iterator !== "function") {
    return documents;
  }
  for (var index = 0, length = documents.length; index < length; index += 1) {
    iterator(documents[index]);
  }
}
function load$1(input, options) {
  var documents = loadDocuments(input, options);
  if (documents.length === 0) {
    return void 0;
  } else if (documents.length === 1) {
    return documents[0];
  }
  throw new exception("expected a single document in the stream, but found more");
}
var loadAll_1 = loadAll$1;
var load_1 = load$1;
var loader = {
  loadAll: loadAll_1,
  load: load_1
};
var _toString = Object.prototype.toString;
var _hasOwnProperty = Object.prototype.hasOwnProperty;
var CHAR_BOM = 65279;
var CHAR_TAB = 9;
var CHAR_LINE_FEED = 10;
var CHAR_CARRIAGE_RETURN = 13;
var CHAR_SPACE = 32;
var CHAR_EXCLAMATION = 33;
var CHAR_DOUBLE_QUOTE = 34;
var CHAR_SHARP = 35;
var CHAR_PERCENT = 37;
var CHAR_AMPERSAND = 38;
var CHAR_SINGLE_QUOTE = 39;
var CHAR_ASTERISK = 42;
var CHAR_COMMA = 44;
var CHAR_MINUS = 45;
var CHAR_COLON = 58;
var CHAR_EQUALS = 61;
var CHAR_GREATER_THAN = 62;
var CHAR_QUESTION = 63;
var CHAR_COMMERCIAL_AT = 64;
var CHAR_LEFT_SQUARE_BRACKET = 91;
var CHAR_RIGHT_SQUARE_BRACKET = 93;
var CHAR_GRAVE_ACCENT = 96;
var CHAR_LEFT_CURLY_BRACKET = 123;
var CHAR_VERTICAL_LINE = 124;
var CHAR_RIGHT_CURLY_BRACKET = 125;
var ESCAPE_SEQUENCES = {};
ESCAPE_SEQUENCES[0] = "\\0";
ESCAPE_SEQUENCES[7] = "\\a";
ESCAPE_SEQUENCES[8] = "\\b";
ESCAPE_SEQUENCES[9] = "\\t";
ESCAPE_SEQUENCES[10] = "\\n";
ESCAPE_SEQUENCES[11] = "\\v";
ESCAPE_SEQUENCES[12] = "\\f";
ESCAPE_SEQUENCES[13] = "\\r";
ESCAPE_SEQUENCES[27] = "\\e";
ESCAPE_SEQUENCES[34] = '\\"';
ESCAPE_SEQUENCES[92] = "\\\\";
ESCAPE_SEQUENCES[133] = "\\N";
ESCAPE_SEQUENCES[160] = "\\_";
ESCAPE_SEQUENCES[8232] = "\\L";
ESCAPE_SEQUENCES[8233] = "\\P";
var DEPRECATED_BOOLEANS_SYNTAX = [
  "y",
  "Y",
  "yes",
  "Yes",
  "YES",
  "on",
  "On",
  "ON",
  "n",
  "N",
  "no",
  "No",
  "NO",
  "off",
  "Off",
  "OFF"
];
var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;
function compileStyleMap(schema2, map2) {
  var result, keys, index, length, tag, style, type2;
  if (map2 === null)
    return {};
  result = {};
  keys = Object.keys(map2);
  for (index = 0, length = keys.length; index < length; index += 1) {
    tag = keys[index];
    style = String(map2[tag]);
    if (tag.slice(0, 2) === "!!") {
      tag = "tag:yaml.org,2002:" + tag.slice(2);
    }
    type2 = schema2.compiledTypeMap["fallback"][tag];
    if (type2 && _hasOwnProperty.call(type2.styleAliases, style)) {
      style = type2.styleAliases[style];
    }
    result[tag] = style;
  }
  return result;
}
function encodeHex(character) {
  var string, handle, length;
  string = character.toString(16).toUpperCase();
  if (character <= 255) {
    handle = "x";
    length = 2;
  } else if (character <= 65535) {
    handle = "u";
    length = 4;
  } else if (character <= 4294967295) {
    handle = "U";
    length = 8;
  } else {
    throw new exception("code point within a string may not be greater than 0xFFFFFFFF");
  }
  return "\\" + handle + common.repeat("0", length - string.length) + string;
}
var QUOTING_TYPE_SINGLE = 1;
var QUOTING_TYPE_DOUBLE = 2;
function State(options) {
  this.schema = options["schema"] || _default;
  this.indent = Math.max(1, options["indent"] || 2);
  this.noArrayIndent = options["noArrayIndent"] || false;
  this.skipInvalid = options["skipInvalid"] || false;
  this.flowLevel = common.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
  this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
  this.sortKeys = options["sortKeys"] || false;
  this.lineWidth = options["lineWidth"] || 80;
  this.noRefs = options["noRefs"] || false;
  this.noCompatMode = options["noCompatMode"] || false;
  this.condenseFlow = options["condenseFlow"] || false;
  this.quotingType = options["quotingType"] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
  this.forceQuotes = options["forceQuotes"] || false;
  this.replacer = typeof options["replacer"] === "function" ? options["replacer"] : null;
  this.implicitTypes = this.schema.compiledImplicit;
  this.explicitTypes = this.schema.compiledExplicit;
  this.tag = null;
  this.result = "";
  this.duplicates = [];
  this.usedDuplicates = null;
}
function indentString(string, spaces) {
  var ind = common.repeat(" ", spaces), position = 0, next = -1, result = "", line, length = string.length;
  while (position < length) {
    next = string.indexOf("\n", position);
    if (next === -1) {
      line = string.slice(position);
      position = length;
    } else {
      line = string.slice(position, next + 1);
      position = next + 1;
    }
    if (line.length && line !== "\n")
      result += ind;
    result += line;
  }
  return result;
}
function generateNextLine(state, level) {
  return "\n" + common.repeat(" ", state.indent * level);
}
function testImplicitResolving(state, str2) {
  var index, length, type2;
  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
    type2 = state.implicitTypes[index];
    if (type2.resolve(str2)) {
      return true;
    }
  }
  return false;
}
function isWhitespace(c) {
  return c === CHAR_SPACE || c === CHAR_TAB;
}
function isPrintable(c) {
  return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== CHAR_BOM || 65536 <= c && c <= 1114111;
}
function isNsCharOrWhitespace(c) {
  return isPrintable(c) && c !== CHAR_BOM && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
}
function isPlainSafe(c, prev, inblock) {
  var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
  var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
  return (
    // ns-plain-safe
    (inblock ? (
      // c = flow-in
      cIsNsCharOrWhitespace
    ) : cIsNsCharOrWhitespace && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET) && c !== CHAR_SHARP && !(prev === CHAR_COLON && !cIsNsChar) || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP || prev === CHAR_COLON && cIsNsChar
  );
}
function isPlainSafeFirst(c) {
  return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
}
function isPlainSafeLast(c) {
  return !isWhitespace(c) && c !== CHAR_COLON;
}
function codePointAt(string, pos) {
  var first = string.charCodeAt(pos), second;
  if (first >= 55296 && first <= 56319 && pos + 1 < string.length) {
    second = string.charCodeAt(pos + 1);
    if (second >= 56320 && second <= 57343) {
      return (first - 55296) * 1024 + second - 56320 + 65536;
    }
  }
  return first;
}
function needIndentIndicator(string) {
  var leadingSpaceRe = /^\n* /;
  return leadingSpaceRe.test(string);
}
var STYLE_PLAIN = 1;
var STYLE_SINGLE = 2;
var STYLE_LITERAL = 3;
var STYLE_FOLDED = 4;
var STYLE_DOUBLE = 5;
function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {
  var i;
  var char = 0;
  var prevChar = null;
  var hasLineBreak = false;
  var hasFoldableLine = false;
  var shouldTrackWidth = lineWidth !== -1;
  var previousLineBreak = -1;
  var plain = isPlainSafeFirst(codePointAt(string, 0)) && isPlainSafeLast(codePointAt(string, string.length - 1));
  if (singleLineOnly || forceQuotes) {
    for (i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
  } else {
    for (i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (char === CHAR_LINE_FEED) {
        hasLineBreak = true;
        if (shouldTrackWidth) {
          hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.
          i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ";
          previousLineBreak = i;
        }
      } else if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
    hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ");
  }
  if (!hasLineBreak && !hasFoldableLine) {
    if (plain && !forceQuotes && !testAmbiguousType(string)) {
      return STYLE_PLAIN;
    }
    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
  }
  if (indentPerLevel > 9 && needIndentIndicator(string)) {
    return STYLE_DOUBLE;
  }
  if (!forceQuotes) {
    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
  }
  return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
}
function writeScalar(state, string, level, iskey, inblock) {
  state.dump = function() {
    if (string.length === 0) {
      return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
    }
    if (!state.noCompatMode) {
      if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {
        return state.quotingType === QUOTING_TYPE_DOUBLE ? '"' + string + '"' : "'" + string + "'";
      }
    }
    var indent = state.indent * Math.max(1, level);
    var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
    var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
    function testAmbiguity(string2) {
      return testImplicitResolving(state, string2);
    }
    switch (chooseScalarStyle(
      string,
      singleLineOnly,
      state.indent,
      lineWidth,
      testAmbiguity,
      state.quotingType,
      state.forceQuotes && !iskey,
      inblock
    )) {
      case STYLE_PLAIN:
        return string;
      case STYLE_SINGLE:
        return "'" + string.replace(/'/g, "''") + "'";
      case STYLE_LITERAL:
        return "|" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
      case STYLE_FOLDED:
        return ">" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
      case STYLE_DOUBLE:
        return '"' + escapeString(string) + '"';
      default:
        throw new exception("impossible error: invalid scalar style");
    }
  }();
}
function blockHeader(string, indentPerLevel) {
  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : "";
  var clip = string[string.length - 1] === "\n";
  var keep = clip && (string[string.length - 2] === "\n" || string === "\n");
  var chomp = keep ? "+" : clip ? "" : "-";
  return indentIndicator + chomp + "\n";
}
function dropEndingNewline(string) {
  return string[string.length - 1] === "\n" ? string.slice(0, -1) : string;
}
function foldString(string, width) {
  var lineRe = /(\n+)([^\n]*)/g;
  var result = function() {
    var nextLF = string.indexOf("\n");
    nextLF = nextLF !== -1 ? nextLF : string.length;
    lineRe.lastIndex = nextLF;
    return foldLine(string.slice(0, nextLF), width);
  }();
  var prevMoreIndented = string[0] === "\n" || string[0] === " ";
  var moreIndented;
  var match;
  while (match = lineRe.exec(string)) {
    var prefix = match[1], line = match[2];
    moreIndented = line[0] === " ";
    result += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine(line, width);
    prevMoreIndented = moreIndented;
  }
  return result;
}
function foldLine(line, width) {
  if (line === "" || line[0] === " ")
    return line;
  var breakRe = / [^ ]/g;
  var match;
  var start = 0, end, curr = 0, next = 0;
  var result = "";
  while (match = breakRe.exec(line)) {
    next = match.index;
    if (next - start > width) {
      end = curr > start ? curr : next;
      result += "\n" + line.slice(start, end);
      start = end + 1;
    }
    curr = next;
  }
  result += "\n";
  if (line.length - start > width && curr > start) {
    result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
  } else {
    result += line.slice(start);
  }
  return result.slice(1);
}
function escapeString(string) {
  var result = "";
  var char = 0;
  var escapeSeq;
  for (var i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
    char = codePointAt(string, i);
    escapeSeq = ESCAPE_SEQUENCES[char];
    if (!escapeSeq && isPrintable(char)) {
      result += string[i];
      if (char >= 65536)
        result += string[i + 1];
    } else {
      result += escapeSeq || encodeHex(char);
    }
  }
  return result;
}
function writeFlowSequence(state, level, object) {
  var _result = "", _tag = state.tag, index, length, value;
  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];
    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }
    if (writeNode(state, level, value, false, false) || typeof value === "undefined" && writeNode(state, level, null, false, false)) {
      if (_result !== "")
        _result += "," + (!state.condenseFlow ? " " : "");
      _result += state.dump;
    }
  }
  state.tag = _tag;
  state.dump = "[" + _result + "]";
}
function writeBlockSequence(state, level, object, compact) {
  var _result = "", _tag = state.tag, index, length, value;
  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];
    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }
    if (writeNode(state, level + 1, value, true, true, false, true) || typeof value === "undefined" && writeNode(state, level + 1, null, true, true, false, true)) {
      if (!compact || _result !== "") {
        _result += generateNextLine(state, level);
      }
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        _result += "-";
      } else {
        _result += "- ";
      }
      _result += state.dump;
    }
  }
  state.tag = _tag;
  state.dump = _result || "[]";
}
function writeFlowMapping(state, level, object) {
  var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = "";
    if (_result !== "")
      pairBuffer += ", ";
    if (state.condenseFlow)
      pairBuffer += '"';
    objectKey = objectKeyList[index];
    objectValue = object[objectKey];
    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }
    if (!writeNode(state, level, objectKey, false, false)) {
      continue;
    }
    if (state.dump.length > 1024)
      pairBuffer += "? ";
    pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
    if (!writeNode(state, level, objectValue, false, false)) {
      continue;
    }
    pairBuffer += state.dump;
    _result += pairBuffer;
  }
  state.tag = _tag;
  state.dump = "{" + _result + "}";
}
function writeBlockMapping(state, level, object, compact) {
  var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
  if (state.sortKeys === true) {
    objectKeyList.sort();
  } else if (typeof state.sortKeys === "function") {
    objectKeyList.sort(state.sortKeys);
  } else if (state.sortKeys) {
    throw new exception("sortKeys must be a boolean or a function");
  }
  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = "";
    if (!compact || _result !== "") {
      pairBuffer += generateNextLine(state, level);
    }
    objectKey = objectKeyList[index];
    objectValue = object[objectKey];
    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }
    if (!writeNode(state, level + 1, objectKey, true, true, true)) {
      continue;
    }
    explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
    if (explicitPair) {
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += "?";
      } else {
        pairBuffer += "? ";
      }
    }
    pairBuffer += state.dump;
    if (explicitPair) {
      pairBuffer += generateNextLine(state, level);
    }
    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
      continue;
    }
    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
      pairBuffer += ":";
    } else {
      pairBuffer += ": ";
    }
    pairBuffer += state.dump;
    _result += pairBuffer;
  }
  state.tag = _tag;
  state.dump = _result || "{}";
}
function detectType(state, object, explicit) {
  var _result, typeList, index, length, type2, style;
  typeList = explicit ? state.explicitTypes : state.implicitTypes;
  for (index = 0, length = typeList.length; index < length; index += 1) {
    type2 = typeList[index];
    if ((type2.instanceOf || type2.predicate) && (!type2.instanceOf || typeof object === "object" && object instanceof type2.instanceOf) && (!type2.predicate || type2.predicate(object))) {
      if (explicit) {
        if (type2.multi && type2.representName) {
          state.tag = type2.representName(object);
        } else {
          state.tag = type2.tag;
        }
      } else {
        state.tag = "?";
      }
      if (type2.represent) {
        style = state.styleMap[type2.tag] || type2.defaultStyle;
        if (_toString.call(type2.represent) === "[object Function]") {
          _result = type2.represent(object, style);
        } else if (_hasOwnProperty.call(type2.represent, style)) {
          _result = type2.represent[style](object, style);
        } else {
          throw new exception("!<" + type2.tag + '> tag resolver accepts not "' + style + '" style');
        }
        state.dump = _result;
      }
      return true;
    }
  }
  return false;
}
function writeNode(state, level, object, block, compact, iskey, isblockseq) {
  state.tag = null;
  state.dump = object;
  if (!detectType(state, object, false)) {
    detectType(state, object, true);
  }
  var type2 = _toString.call(state.dump);
  var inblock = block;
  var tagStr;
  if (block) {
    block = state.flowLevel < 0 || state.flowLevel > level;
  }
  var objectOrArray = type2 === "[object Object]" || type2 === "[object Array]", duplicateIndex, duplicate;
  if (objectOrArray) {
    duplicateIndex = state.duplicates.indexOf(object);
    duplicate = duplicateIndex !== -1;
  }
  if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
    compact = false;
  }
  if (duplicate && state.usedDuplicates[duplicateIndex]) {
    state.dump = "*ref_" + duplicateIndex;
  } else {
    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
      state.usedDuplicates[duplicateIndex] = true;
    }
    if (type2 === "[object Object]") {
      if (block && Object.keys(state.dump).length !== 0) {
        writeBlockMapping(state, level, state.dump, compact);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + state.dump;
        }
      } else {
        writeFlowMapping(state, level, state.dump);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + " " + state.dump;
        }
      }
    } else if (type2 === "[object Array]") {
      if (block && state.dump.length !== 0) {
        if (state.noArrayIndent && !isblockseq && level > 0) {
          writeBlockSequence(state, level - 1, state.dump, compact);
        } else {
          writeBlockSequence(state, level, state.dump, compact);
        }
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + state.dump;
        }
      } else {
        writeFlowSequence(state, level, state.dump);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + " " + state.dump;
        }
      }
    } else if (type2 === "[object String]") {
      if (state.tag !== "?") {
        writeScalar(state, state.dump, level, iskey, inblock);
      }
    } else if (type2 === "[object Undefined]") {
      return false;
    } else {
      if (state.skipInvalid)
        return false;
      throw new exception("unacceptable kind of an object to dump " + type2);
    }
    if (state.tag !== null && state.tag !== "?") {
      tagStr = encodeURI(
        state.tag[0] === "!" ? state.tag.slice(1) : state.tag
      ).replace(/!/g, "%21");
      if (state.tag[0] === "!") {
        tagStr = "!" + tagStr;
      } else if (tagStr.slice(0, 18) === "tag:yaml.org,2002:") {
        tagStr = "!!" + tagStr.slice(18);
      } else {
        tagStr = "!<" + tagStr + ">";
      }
      state.dump = tagStr + " " + state.dump;
    }
  }
  return true;
}
function getDuplicateReferences(object, state) {
  var objects = [], duplicatesIndexes = [], index, length;
  inspectNode(object, objects, duplicatesIndexes);
  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
    state.duplicates.push(objects[duplicatesIndexes[index]]);
  }
  state.usedDuplicates = new Array(length);
}
function inspectNode(object, objects, duplicatesIndexes) {
  var objectKeyList, index, length;
  if (object !== null && typeof object === "object") {
    index = objects.indexOf(object);
    if (index !== -1) {
      if (duplicatesIndexes.indexOf(index) === -1) {
        duplicatesIndexes.push(index);
      }
    } else {
      objects.push(object);
      if (Array.isArray(object)) {
        for (index = 0, length = object.length; index < length; index += 1) {
          inspectNode(object[index], objects, duplicatesIndexes);
        }
      } else {
        objectKeyList = Object.keys(object);
        for (index = 0, length = objectKeyList.length; index < length; index += 1) {
          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
        }
      }
    }
  }
}
function dump$1(input, options) {
  options = options || {};
  var state = new State(options);
  if (!state.noRefs)
    getDuplicateReferences(input, state);
  var value = input;
  if (state.replacer) {
    value = state.replacer.call({ "": value }, "", value);
  }
  if (writeNode(state, 0, value, true, true))
    return state.dump + "\n";
  return "";
}
var dump_1 = dump$1;
var dumper = {
  dump: dump_1
};
function renamed(from, to) {
  return function() {
    throw new Error("Function yaml." + from + " is removed in js-yaml 4. Use yaml." + to + " instead, which is now safe by default.");
  };
}
var load = loader.load;
var loadAll = loader.loadAll;
var dump = dumper.dump;
var safeLoad = renamed("safeLoad", "load");
var safeLoadAll = renamed("safeLoadAll", "loadAll");
var safeDump = renamed("safeDump", "dump");

// src/services/config-service.ts
var ConfigService = class {
  constructor(app, settings) {
    this.config = null;
    this.configWatcher = null;
    this.app = app;
    this.settings = settings;
    this.initializeConfigFromSettings();
  }
  /**
   * Initialize config from plugin settings instead of YAML file
   */
  initializeConfigFromSettings() {
    if (!this.settings.summarize || !this.settings.keywords || !this.settings.translate || !this.settings.rewrite || !this.settings.compose) {
      console.error("Missing required operation settings");
      return;
    }
    this.config = {
      summarize: this.settings.summarize,
      keywords: this.settings.keywords,
      translate: this.settings.translate,
      rewrite: this.settings.rewrite,
      compose: this.settings.compose
    };
    console.log("Config initialized from plugin settings:", this.config);
  }
  getConfig() {
    return this.config;
  }
  updateSettings(settings) {
    this.settings = settings;
    this.initializeConfigFromSettings();
  }
  /**
   * Migration method to load config from YAML file and convert to settings
   */
  async migrateFromYAML() {
    try {
      if (!this.settings.configFilePath) {
        console.log("No config file path set for migration");
        return null;
      }
      const configPath = this.settings.configFilePath;
      console.log("Attempting migration from:", configPath);
      const configFile = this.app.vault.getAbstractFileByPath(configPath);
      if (!configFile) {
        console.log("No existing config file found for migration");
        return null;
      }
      const configContent = await this.app.vault.read(configFile);
      const yamlConfig = load(configContent);
      const migratedSettings = {
        summarize: yamlConfig.summarize,
        keywords: yamlConfig.keywords,
        translate: yamlConfig.translate,
        rewrite: yamlConfig.rewrite,
        compose: yamlConfig.compose
      };
      console.log("Migration successful:", migratedSettings);
      new import_obsidian.Notice("Configuration migrated from YAML file successfully");
      return migratedSettings;
    } catch (error) {
      console.error("Error during migration:", error);
      new import_obsidian.Notice("Error migrating configuration: " + error.message);
      return null;
    }
  }
  /**
   * Migration method to load config from YAML content string and convert to settings
   */
  async migrateFromYAMLContent(yamlContent) {
    try {
      console.log("Attempting migration from YAML content");
      const yamlConfig = load(yamlContent);
      const migratedSettings = {
        summarize: yamlConfig.summarize,
        keywords: yamlConfig.keywords,
        translate: yamlConfig.translate,
        rewrite: yamlConfig.rewrite,
        compose: yamlConfig.compose
      };
      console.log("Migration from content successful:", migratedSettings);
      return migratedSettings;
    } catch (error) {
      console.error("Error during migration from content:", error);
      throw new Error("Error migrating configuration: " + error.message);
    }
  }
  /**
   * Export current settings to YAML format
   */
  async exportToYAML() {
    try {
      const config = this.getConfig();
      if (!config) {
        throw new Error("No configuration available");
      }
      const yamlContent = dump(config, {
        indent: 2,
        lineWidth: 120
      });
      console.log("Settings exported to YAML");
      return yamlContent;
    } catch (error) {
      console.error("Error exporting to YAML:", error);
      throw new Error("Failed to export configuration: " + error.message);
    }
  }
  /**
   * Setup config watcher (deprecated, kept for backward compatibility)
   */
  setupConfigWatcher() {
    if (this.configWatcher) {
      this.app.vault.offref(this.configWatcher);
    }
    console.log("Config watcher setup skipped (using UI settings)");
  }
  /**
   * Load config from YAML file (deprecated, kept for backward compatibility)
   */
  async loadConfig() {
    console.log("YAML config loading skipped (using UI settings)");
  }
  cleanup() {
    if (this.configWatcher) {
      this.app.vault.offref(this.configWatcher);
      this.configWatcher = null;
    }
  }
};

// src/services/ai-service.ts
var AIService = class {
  constructor(settings) {
    this.settings = settings;
  }
  updateSettings(settings) {
    this.settings = settings;
  }
  async summarize(request) {
    return this.makeRequest("/api/v1/summarize", request, request.config.stream);
  }
  async extractKeywords(request) {
    return this.makeRequest("/api/v1/keywords", request, false);
  }
  async translate(request) {
    return this.makeRequest("/api/v1/translate", request, request.config.stream);
  }
  async rewrite(request) {
    return this.makeRequest("/api/v1/rewrite", request, request.config.stream);
  }
  async compose(request) {
    return this.makeRequest("/api/v1/compose", request, request.config.stream);
  }
  async makeRequest(endpoint, requestBody, isStreaming) {
    const normalizedEndpoint = endpoint.startsWith("/") ? endpoint : "/" + endpoint;
    const headers = {
      "Content-Type": "application/json",
      "Origin": "app://obsidian.md",
      "Accept": isStreaming ? "text/event-stream, application/x-ndjson, application/json" : "application/json"
    };
    if (this.settings.apiKey) {
      headers["Authorization"] = `Bearer ${this.settings.apiKey}`;
    }
    const response = await fetch(`${this.settings.apiUrl}${normalizedEndpoint}`, {
      method: "POST",
      headers,
      body: JSON.stringify(requestBody)
    });
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
    }
    return response;
  }
};

// src/services/streaming-service.ts
var import_obsidian2 = require("obsidian");

// src/utils/editor-utils.ts
function appendToEndOfDocument(editor, text) {
  const lastLine = editor.lastLine();
  const lastLineContent = editor.getLine(lastLine);
  const endOfDocument = { line: lastLine, ch: lastLineContent.length };
  editor.setCursor(endOfDocument);
  editor.replaceRange(text, endOfDocument, endOfDocument);
}

// src/services/streaming-service.ts
var StreamingService = class {
  async handleStreamingResponse(response, editor, headerText, successMessage) {
    const reader = response.body.getReader();
    const decoder = new TextDecoder();
    appendToEndOfDocument(editor, headerText);
    let buffer = "";
    let totalContent = "";
    try {
      while (true) {
        const { done, value } = await reader.read();
        if (done) {
          break;
        }
        const chunk = decoder.decode(value, { stream: true });
        buffer += chunk;
        const lines = buffer.split(/\r?\n/);
        buffer = lines.pop() || "";
        for (const line of lines) {
          if (line.trim() === "")
            continue;
          try {
            let jsonStr = line;
            if (line.startsWith("data: ")) {
              jsonStr = line.slice(6).trim();
            } else if (line.startsWith("event:") || line.startsWith("id:") || line.startsWith("retry:")) {
              continue;
            }
            if (jsonStr === "[DONE]" || jsonStr === "data: [DONE]") {
              continue;
            }
            if (!jsonStr || !jsonStr.startsWith("{") && !jsonStr.startsWith("[")) {
              continue;
            }
            const streamData = JSON.parse(jsonStr);
            const content = streamData.content || streamData.text || streamData.delta || streamData.chunk || streamData.message;
            if (content) {
              totalContent += content;
              await new Promise((resolve) => setTimeout(resolve, 10));
              const lastLine = editor.lastLine();
              const lastLineContent = editor.getLine(lastLine);
              const appendPosition = { line: lastLine, ch: lastLineContent.length };
              editor.replaceRange(content, appendPosition, appendPosition);
              const newLastLine = editor.lastLine();
              editor.setCursor({ line: newLastLine, ch: editor.getLine(newLastLine).length });
              editor.scrollIntoView({ from: { line: newLastLine, ch: 0 }, to: { line: newLastLine, ch: 0 } }, true);
            }
            if (streamData.done) {
              new import_obsidian2.Notice(successMessage);
              return;
            }
          } catch (parseError) {
          }
        }
      }
      if (buffer.trim()) {
        try {
          let jsonStr = buffer.trim();
          if (jsonStr.startsWith("data: ")) {
            jsonStr = jsonStr.slice(6).trim();
          }
          if (jsonStr !== "[DONE]" && jsonStr.startsWith("{")) {
            const streamData = JSON.parse(jsonStr);
            const content = streamData.content || streamData.text || streamData.delta || streamData.chunk || streamData.message;
            if (content) {
              totalContent += content;
              const lastLine = editor.lastLine();
              const lastLineContent = editor.getLine(lastLine);
              const appendPosition = { line: lastLine, ch: lastLineContent.length };
              editor.replaceRange(content, appendPosition, appendPosition);
            }
          }
        } catch (e) {
        }
      }
    } catch (streamError) {
      new import_obsidian2.Notice("Error during streaming: " + streamError.message);
    } finally {
      reader.releaseLock();
    }
    new import_obsidian2.Notice(successMessage);
  }
};

// src/services/ui-state-service.ts
var import_obsidian3 = require("obsidian");
var UIStateService = class extends import_obsidian3.Events {
  constructor() {
    super(...arguments);
    this.state = {
      isModalOpen: false
    };
  }
  getState() {
    return this.state;
  }
  setModalState(isOpen) {
    if (this.state.isModalOpen !== isOpen) {
      this.state.isModalOpen = isOpen;
      this.trigger("modal-state-change", this.state);
    }
  }
};

// src/operations/summarize.ts
var import_obsidian4 = require("obsidian");
var SummarizeOperation = class {
  constructor(aiService, streamingService, configService) {
    this.aiService = aiService;
    this.streamingService = streamingService;
    this.configService = configService;
  }
  async execute(editor, text, settings) {
    if (!settings.summarize) {
      new import_obsidian4.Notice("Please configure the summarize settings in the plugin settings first");
      return;
    }
    if (!settings.apiUrl) {
      new import_obsidian4.Notice("Please configure the summarize settings in the plugin settings first");
      return;
    }
    try {
      const requestBody = {
        payload: {
          text,
          maxLength: settings.summarize.maxLength || 200
        },
        config: {
          provider: settings.summarize.provider,
          model: settings.summarize.model,
          temperature: settings.summarize.temperature,
          stream: settings.summarize.stream
        }
      };
      const response = await this.aiService.summarize(requestBody);
      const contentType = response.headers.get("content-type") || "";
      const isStreaming = settings.summarize.stream && (contentType.includes("text/event-stream") || contentType.includes("application/x-ndjson") || response.body);
      if (isStreaming && response.body) {
        await this.streamingService.handleStreamingResponse(
          response,
          editor,
          "\n\n**Summary:**\n\n",
          "Text summarized successfully"
        );
      } else {
        const result = await response.json();
        appendToEndOfDocument(editor, `

**Summary:**

 ${result.summary}`);
        new import_obsidian4.Notice("Text summarized successfully");
      }
    } catch (error) {
      console.error("Error summarizing text:", error);
      new import_obsidian4.Notice("Please configure the summarize settings in the plugin settings first");
    }
  }
};

// src/operations/translate.ts
var import_obsidian5 = require("obsidian");
var TranslateOperation = class {
  constructor(aiService, streamingService, configService) {
    this.aiService = aiService;
    this.streamingService = streamingService;
    this.configService = configService;
  }
  async execute(editor, text, settings, customTargetLanguage) {
    if (!settings.translate) {
      new import_obsidian5.Notice("Please configure the translate settings in the plugin settings first");
      return;
    }
    if (!settings.apiUrl) {
      new import_obsidian5.Notice("Please configure the translate settings in the plugin settings first");
      return;
    }
    const targetLanguage = customTargetLanguage || settings.translate.defaultTargetLanguage;
    if (!targetLanguage) {
      new import_obsidian5.Notice("Please configure the translate settings in the plugin settings first");
      return;
    }
    try {
      const requestBody = {
        payload: {
          text,
          targetLanguage
        },
        config: {
          provider: settings.translate.provider,
          model: settings.translate.model,
          temperature: settings.translate.temperature,
          stream: settings.translate.stream
        }
      };
      const response = await this.aiService.translate(requestBody);
      const contentType = response.headers.get("content-type") || "";
      const isStreaming = settings.translate.stream && (contentType.includes("text/event-stream") || contentType.includes("application/x-ndjson") || response.body);
      if (isStreaming && response.body) {
        await this.streamingService.handleStreamingResponse(
          response,
          editor,
          `

**Translation (${targetLanguage}):**

`,
          "Text translated successfully"
        );
      } else {
        const result = await response.json();
        appendToEndOfDocument(editor, `

**Translation (${targetLanguage}):**

${result.translation}`);
        new import_obsidian5.Notice("Text translated successfully");
      }
    } catch (error) {
      console.error("Error translating text:", error);
      new import_obsidian5.Notice("Please configure the translate settings in the plugin settings first");
    }
  }
};

// src/operations/keywords.ts
var import_obsidian6 = require("obsidian");
var KeywordsOperation = class {
  constructor(aiService, configService) {
    this.aiService = aiService;
    this.configService = configService;
  }
  async execute(editor, text, settings) {
    if (!settings.keywords) {
      new import_obsidian6.Notice("Please configure the keywords settings in the plugin settings first");
      return;
    }
    if (!settings.apiUrl) {
      new import_obsidian6.Notice("Please configure the keywords settings in the plugin settings first");
      return;
    }
    try {
      const requestBody = {
        payload: {
          text,
          maxKeywords: settings.keywords.maxKeywords || 10
        },
        config: {
          provider: settings.keywords.provider,
          model: settings.keywords.model,
          temperature: settings.keywords.temperature || 0.3,
          stream: settings.keywords.stream
        }
      };
      const response = await this.aiService.extractKeywords(requestBody);
      const result = await response.json();
      const cursor = editor.getCursor("to");
      editor.setCursor(cursor);
      const keywordsList = result.keywords.map((keyword) => `- ${keyword}`).join("\n");
      editor.replaceRange(`

**Keywords:**
${keywordsList}`, cursor);
      new import_obsidian6.Notice("Keywords extracted successfully");
    } catch (error) {
      console.error("Error extracting keywords:", error);
      new import_obsidian6.Notice("Please configure the keywords settings in the plugin settings first");
    }
  }
};

// src/operations/rewrite.ts
var import_obsidian7 = require("obsidian");
var RewriteOperation = class {
  constructor(aiService, streamingService, configService) {
    this.aiService = aiService;
    this.streamingService = streamingService;
    this.configService = configService;
  }
  async execute(editor, text, instruction, tone, headerLabel, settings) {
    if (!settings.rewrite) {
      new import_obsidian7.Notice("Please configure the rewrite settings in the plugin settings first");
      return;
    }
    if (!settings.apiUrl) {
      new import_obsidian7.Notice("Please configure the rewrite settings in the plugin settings first");
      return;
    }
    try {
      const requestBody = {
        payload: {
          text,
          instruction,
          ...tone && tone.trim() !== "" && { tone }
        },
        config: {
          provider: settings.rewrite.provider,
          model: settings.rewrite.model,
          temperature: settings.rewrite.temperature,
          stream: settings.rewrite.stream
        }
      };
      const response = await this.aiService.rewrite(requestBody);
      const contentType = response.headers.get("content-type") || "";
      const isStreaming = settings.rewrite.stream && (contentType.includes("text/event-stream") || contentType.includes("application/x-ndjson") || response.body);
      if (isStreaming && response.body) {
        await this.streamingService.handleStreamingResponse(
          response,
          editor,
          `

**${headerLabel}:**

`,
          "Action applied successfully"
        );
      } else {
        const result = await response.json();
        const output = result.text || result.result || result.output || result.content || result.message || "";
        appendToEndOfDocument(editor, `

**${headerLabel}:**

${output}`);
        new import_obsidian7.Notice("Action applied successfully");
      }
    } catch (error) {
      console.error("Error applying rewrite:", error);
      new import_obsidian7.Notice("Please configure the rewrite settings in the plugin settings first");
    }
  }
  // Convenience methods for different rewrite operations
  async improveDescription(editor, text, settings) {
    await this.execute(editor, text, "improve_text", "", "Improved description", settings);
  }
  async improveWriting(editor, text, settings) {
    await this.execute(editor, text, "improve_text", "", "Improved writing", settings);
  }
  async fixSpellingGrammar(editor, text, settings) {
    await this.execute(editor, text, "fix_spelling_grammar", "", "Fixed spelling & grammar", settings);
  }
  async brainstorm(editor, text, settings) {
    await this.execute(editor, text, "brainstorm_ideas", "", "Brainstorm", settings);
  }
  async makeShorter(editor, text, settings) {
    await this.execute(editor, text, "shorten", "", "Shorter version", settings);
  }
  async changeTone(editor, text, tone, settings) {
    await this.execute(editor, text, "rewrite_with_tone", tone, "Changing tone", settings);
  }
};

// src/operations/compose.ts
var import_obsidian8 = require("obsidian");
var ComposeOperation = class {
  constructor(aiService, streamingService, configService) {
    this.aiService = aiService;
    this.streamingService = streamingService;
    this.configService = configService;
  }
  async execute(editor, topic, settings) {
    var _a;
    if (!settings.compose) {
      new import_obsidian8.Notice("Please configure the compose settings in the plugin settings first");
      return;
    }
    if (!settings.apiUrl) {
      new import_obsidian8.Notice("Please configure the compose settings in the plugin settings first");
      return;
    }
    try {
      const requestBody = {
        payload: {
          topic,
          maxLength: ((_a = settings.compose) == null ? void 0 : _a.maxLength) || 200
        },
        config: {
          provider: settings.compose.provider,
          model: settings.compose.model,
          temperature: settings.compose.temperature,
          stream: settings.compose.stream
        }
      };
      const response = await this.aiService.compose(requestBody);
      const contentType = response.headers.get("content-type") || "";
      const isStreaming = settings.compose.stream && (contentType.includes("text/event-stream") || contentType.includes("application/x-ndjson") || response.body);
      if (isStreaming && response.body) {
        await this.streamingService.handleStreamingResponse(
          response,
          editor,
          `

**New Idea**

`,
          "Composed successfully"
        );
      } else {
        const result = await response.json();
        appendToEndOfDocument(editor, `

**New Idea**

`);
        new import_obsidian8.Notice("Composed successfully");
      }
    } catch (error) {
      console.error("Compose operation error:", error);
      new import_obsidian8.Notice("Please configure the compose settings in the plugin settings first");
    }
  }
};

// src/ui/commands.ts
var import_obsidian9 = require("obsidian");

// src/types/languages.ts
var SUPPORTED_LANGUAGES = [
  { label: "English", code: "en" },
  { label: "Spanish", code: "es" },
  { label: "French", code: "fr" },
  { label: "German", code: "de" },
  { label: "Italian", code: "it" },
  { label: "Portuguese", code: "pt" },
  { label: "Chinese (Simplified)", code: "zh" },
  { label: "Japanese", code: "ja" },
  { label: "Korean", code: "ko" },
  { label: "Hindi", code: "hi" },
  { label: "Arabic", code: "ar" },
  { label: "Dutch", code: "nl" },
  { label: "Russian", code: "ru" }
];
var POPULAR_LANGUAGES = [
  { label: "English", code: "en" },
  { label: "Spanish", code: "es" },
  { label: "French", code: "fr" },
  { label: "German", code: "de" },
  { label: "Italian", code: "it" },
  { label: "Portuguese", code: "pt" },
  { label: "Chinese (Simplified)", code: "zh" },
  { label: "Japanese", code: "ja" },
  { label: "Korean", code: "ko" },
  { label: "Hindi", code: "hi" },
  { label: "Arabic", code: "ar" },
  { label: "Dutch", code: "nl" },
  { label: "Russian", code: "ru" }
];

// src/types/tones.ts
var TONES = [
  "Friendly",
  "Formal",
  "Casual",
  "Professional",
  "Confident",
  "Empathetic",
  "Persuasive",
  "Playful",
  "Direct"
];

// src/ui/commands.ts
var CommandsManager = class {
  constructor(summarizeOperation, translateOperation, keywordsOperation, rewriterOperation, settings) {
    this.tones = TONES;
    this.summarizeOperation = summarizeOperation;
    this.translateOperation = translateOperation;
    this.keywordsOperation = keywordsOperation;
    this.rewriterOperation = rewriterOperation;
    this.settings = settings;
    this.languages = [...SUPPORTED_LANGUAGES];
  }
  updateSettings(settings) {
    this.settings = settings;
  }
  getCommands() {
    const baseCommands = [
      {
        id: "summarize-selection",
        name: "Summarize selected text",
        editorCallback: async (editor, view) => {
          const selection = editor.getSelection();
          if (selection.length > 0) {
            await this.summarizeOperation.execute(editor, selection, this.settings);
          } else {
            new import_obsidian9.Notice("Please select some text to summarize");
          }
        }
      },
      {
        id: "extract-keywords-selection",
        name: "Extract keywords from selected text",
        editorCallback: async (editor, view) => {
          const selection = editor.getSelection();
          if (selection.length > 0) {
            await this.keywordsOperation.execute(editor, selection, this.settings);
          } else {
            new import_obsidian9.Notice("Please select some text to extract keywords from");
          }
        }
      },
      {
        id: "translate-selection",
        name: "Translate selected text (default language)",
        editorCallback: async (editor, view) => {
          const selection = editor.getSelection();
          if (selection.length > 0) {
            await this.translateOperation.execute(editor, selection, this.settings);
          } else {
            new import_obsidian9.Notice("Please select some text to translate");
          }
        }
      },
      {
        id: "improve-description-selection",
        name: "Improve description of selected text",
        editorCallback: async (editor, view) => {
          const selection = editor.getSelection();
          if (selection.length > 0) {
            await this.rewriterOperation.improveDescription(editor, selection, this.settings);
          } else {
            new import_obsidian9.Notice("Please select some text to improve");
          }
        }
      },
      {
        id: "improve-writing-selection",
        name: "Improve writing of selected text",
        editorCallback: async (editor, view) => {
          const selection = editor.getSelection();
          if (selection.length > 0) {
            await this.rewriterOperation.improveWriting(editor, selection, this.settings);
          } else {
            new import_obsidian9.Notice("Please select some text to improve");
          }
        }
      },
      {
        id: "fix-spelling-grammar-selection",
        name: "Fix spelling & grammar of selection",
        editorCallback: async (editor, view) => {
          const selection = editor.getSelection();
          if (selection.length > 0) {
            await this.rewriterOperation.fixSpellingGrammar(editor, selection, this.settings);
          } else {
            new import_obsidian9.Notice("Please select some text to correct");
          }
        }
      },
      {
        id: "brainstorm-selection",
        name: "Brainstorm ideas from selection",
        editorCallback: async (editor, view) => {
          const selection = editor.getSelection();
          if (selection.length > 0) {
            await this.rewriterOperation.brainstorm(editor, selection, this.settings);
          } else {
            new import_obsidian9.Notice("Please select some text to brainstorm on");
          }
        }
      },
      {
        id: "make-shorter-selection",
        name: "Make selected text shorter",
        editorCallback: async (editor, view) => {
          const selection = editor.getSelection();
          if (selection.length > 0) {
            await this.rewriterOperation.makeShorter(editor, selection, this.settings);
          } else {
            new import_obsidian9.Notice("Please select some text to shorten");
          }
        }
      }
    ];
    const translationCommands = this.languages.map((language) => ({
      id: `translate-selection-to-${language.code}`,
      name: `Translate selection to ${language.label}`,
      editorCallback: async (editor, view) => {
        const selection = editor.getSelection();
        if (selection.length > 0) {
          await this.translateOperation.execute(editor, selection, this.settings, language.code);
        } else {
          new import_obsidian9.Notice("Please select some text to translate");
        }
      }
    }));
    const rewriteCommands = this.tones.map((tone) => ({
      id: `change-tone-${tone.toLowerCase()}-selection`,
      name: `Change tone to ${tone}`,
      editorCallback: async (editor, view) => {
        const selection = editor.getSelection();
        if (selection.length > 0) {
          await this.rewriterOperation.changeTone(editor, selection, tone, this.settings);
        } else {
          new import_obsidian9.Notice("Please select some text to translate");
        }
      }
    }));
    return [...baseCommands, ...translationCommands, ...rewriteCommands];
  }
};

// src/ui/settings-tab.ts
var import_obsidian12 = require("obsidian");

// src/ui/export-path-modal.ts
var import_obsidian10 = require("obsidian");
var ExportPathModal = class extends import_obsidian10.Modal {
  constructor(app, defaultFileName, extension, content) {
    super(app);
    this.fileName = defaultFileName;
    this.extension = extension;
    this.content = content;
    this.onExportComplete = () => {
    };
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Export Configuration" });
    new import_obsidian10.Setting(contentEl).setName("File name").setDesc("Enter the name for the exported file").addText((text) => {
      text.setValue(this.fileName).setPlaceholder(`Enter file name`).onChange((value) => {
        this.fileName = value;
      });
    });
    const pathInfo = contentEl.createDiv();
    pathInfo.style.marginBottom = "1em";
    pathInfo.style.padding = "0.5em";
    pathInfo.style.background = "var(--background-secondary)";
    pathInfo.style.borderRadius = "4px";
    pathInfo.style.fontSize = "0.9em";
    pathInfo.textContent = `The file will be saved in your vault's root directory as: ${this.fileName}.${this.extension}`;
    const buttonContainer = contentEl.createDiv();
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "flex-end";
    buttonContainer.style.gap = "1em";
    buttonContainer.style.marginTop = "2em";
    const cancelButton = buttonContainer.createEl("button", { text: "Cancel" });
    cancelButton.style.padding = "0.5em 1em";
    cancelButton.style.borderRadius = "4px";
    cancelButton.style.border = "1px solid var(--background-modifier-border)";
    cancelButton.style.background = "var(--background-primary)";
    cancelButton.style.cursor = "pointer";
    cancelButton.onclick = () => {
      this.close();
    };
    const exportButton = buttonContainer.createEl("button", { text: "Export" });
    exportButton.style.padding = "0.5em 1em";
    exportButton.style.borderRadius = "4px";
    exportButton.style.border = "none";
    exportButton.style.background = "var(--interactive-accent)";
    exportButton.style.color = "var(--text-on-accent)";
    exportButton.style.cursor = "pointer";
    exportButton.onclick = async () => {
      await this.exportFile();
    };
    const handleKeyPress = (event) => {
      if (event.key === "Enter") {
        event.preventDefault();
        this.exportFile();
      } else if (event.key === "Escape") {
        event.preventDefault();
        this.close();
      }
    };
    contentEl.addEventListener("keydown", handleKeyPress);
    this.register(() => {
      contentEl.removeEventListener("keydown", handleKeyPress);
    });
  }
  async exportFile() {
    try {
      let finalFileName = this.fileName;
      if (!finalFileName.endsWith(`.${this.extension}`)) {
        finalFileName = `${finalFileName}.${this.extension}`;
      }
      await this.app.vault.create(finalFileName, this.content);
      this.close();
      this.onExportComplete(finalFileName);
    } catch (error) {
      console.error("Failed to export file:", error);
      const errorDiv = this.contentEl.createDiv();
      errorDiv.style.color = "var(--text-error)";
      errorDiv.style.padding = "1em";
      errorDiv.style.background = "var(--background-modifier-error)";
      errorDiv.style.borderRadius = "4px";
      errorDiv.style.marginTop = "1em";
      errorDiv.textContent = `Failed to export: ${error.message}`;
      setTimeout(() => {
        errorDiv.remove();
      }, 3e3);
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    this.onExportComplete(null);
  }
};

// src/ui/import-file-modal.ts
var import_obsidian11 = require("obsidian");
var ImportFileModal = class extends import_obsidian11.Modal {
  constructor(app, extension) {
    super(app);
    this.selectedFile = null;
    this.extension = extension;
    this.onImportComplete = () => {
    };
  }
  onOpen() {
    var _a;
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Import Configuration" });
    const files = this.app.vault.getFiles().filter(
      (file) => file.name.endsWith(`.${this.extension}`)
    );
    if (files.length === 0) {
      const noFilesMsg = contentEl.createDiv();
      noFilesMsg.style.padding = "1em";
      noFilesMsg.style.background = "var(--background-modifier-error)";
      noFilesMsg.style.color = "var(--text-normal)";
      noFilesMsg.style.borderRadius = "4px";
      noFilesMsg.textContent = `No .${this.extension} files found in your vault.`;
      return;
    }
    new import_obsidian11.Setting(contentEl).setName("Select file").setDesc(`Choose a .${this.extension} file to import`).addDropdown((dropdown) => {
      files.forEach((file) => {
        dropdown.addOption(file.path, file.name);
      });
      dropdown.setValue(files[0].path);
      dropdown.onChange((value) => {
        this.selectedFile = files.find((f) => f.path === value) || null;
      });
      this.selectedFile = files[0];
    });
    const fileInfo = contentEl.createDiv();
    fileInfo.style.marginBottom = "1em";
    fileInfo.style.padding = "0.5em";
    fileInfo.style.background = "var(--background-secondary)";
    fileInfo.style.borderRadius = "4px";
    fileInfo.style.fontSize = "0.9em";
    fileInfo.textContent = `Selected file: ${((_a = this.selectedFile) == null ? void 0 : _a.name) || "None"}`;
    const buttonContainer = contentEl.createDiv();
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "flex-end";
    buttonContainer.style.gap = "1em";
    buttonContainer.style.marginTop = "2em";
    const cancelButton = buttonContainer.createEl("button", { text: "Cancel" });
    cancelButton.style.padding = "0.5em 1em";
    cancelButton.style.borderRadius = "4px";
    cancelButton.style.border = "1px solid var(--background-modifier-border)";
    cancelButton.style.background = "var(--background-primary)";
    cancelButton.style.cursor = "pointer";
    cancelButton.onclick = () => {
      this.close();
    };
    const importButton = buttonContainer.createEl("button", { text: "Import" });
    importButton.style.padding = "0.5em 1em";
    importButton.style.borderRadius = "4px";
    importButton.style.border = "none";
    importButton.style.background = "var(--interactive-accent)";
    importButton.style.color = "var(--text-on-accent)";
    importButton.style.cursor = "pointer";
    importButton.onclick = async () => {
      await this.importFile();
    };
    const updateFileInfo = () => {
      var _a2;
      fileInfo.textContent = `Selected file: ${((_a2 = this.selectedFile) == null ? void 0 : _a2.name) || "None"}`;
    };
    const handleKeyPress = (event) => {
      if (event.key === "Enter") {
        event.preventDefault();
        this.importFile();
      } else if (event.key === "Escape") {
        event.preventDefault();
        this.close();
      }
    };
    contentEl.addEventListener("keydown", handleKeyPress);
    this.register(() => {
      contentEl.removeEventListener("keydown", handleKeyPress);
    });
  }
  async importFile() {
    try {
      if (!this.selectedFile) {
        throw new Error("No file selected");
      }
      const fileContent = await this.app.vault.read(this.selectedFile);
      this.close();
      this.onImportComplete(this.selectedFile.path, fileContent);
    } catch (error) {
      console.error("Failed to import file:", error);
      const errorDiv = this.contentEl.createDiv();
      errorDiv.style.color = "var(--text-error)";
      errorDiv.style.padding = "1em";
      errorDiv.style.background = "var(--background-modifier-error)";
      errorDiv.style.borderRadius = "4px";
      errorDiv.style.marginTop = "1em";
      errorDiv.textContent = `Failed to import: ${error.message}`;
      setTimeout(() => {
        errorDiv.remove();
      }, 3e3);
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    this.onImportComplete(null, null);
  }
};

// src/ui/settings-tab.ts
var AIPluginSettingTab = class extends import_obsidian12.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.activeTab = "general";
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "AI Backends Settings" });
    const tabContainer = containerEl.createDiv("tab-container");
    tabContainer.style.display = "flex";
    tabContainer.style.marginBottom = "20px";
    tabContainer.style.borderBottom = "1px solid var(--background-modifier-border)";
    this.createTab(tabContainer, "General", "general", () => this.displayGeneralSettings());
    this.createTab(tabContainer, "Operations", "operations", () => this.displayOperationsSettings());
    this.createTab(tabContainer, "Advanced", "advanced", () => this.displayAdvancedSettings());
    const contentContainer = containerEl.createDiv("tab-content");
    switch (this.activeTab) {
      case "general":
        this.displayGeneralSettings();
        break;
      case "operations":
        this.displayOperationsSettings();
        break;
      case "advanced":
        this.displayAdvancedSettings();
        break;
    }
  }
  createTab(container, label, tabId, onClick) {
    const tab = container.createEl("button", { text: label });
    tab.style.padding = "10px 20px";
    tab.style.border = "none";
    tab.style.background = this.activeTab === tabId ? "var(--background-modifier-error-hover)" : "transparent";
    tab.style.cursor = "pointer";
    tab.style.borderBottom = this.activeTab === tabId ? "2px solid var(--text-accent)" : "none";
    tab.addEventListener("click", () => {
      this.activeTab = tabId;
      this.display();
    });
  }
  displayGeneralSettings() {
    const container = this.containerEl.querySelector(".tab-content");
    if (!container)
      return;
    container.empty();
    container.createEl("h3", { text: "API Configuration" });
    new import_obsidian12.Setting(container).setName("API URL").setDesc("Enter the base URL for the AI API (e.g., http://localhost:3000)").addText((text) => text.setPlaceholder("http://localhost:3000").setValue(this.plugin.settings.apiUrl).onChange(async (value) => {
      this.plugin.settings.apiUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian12.Setting(container).setName("API Key").setDesc("Enter your API key").addText((text) => text.setPlaceholder("Enter your API key").setValue(this.plugin.settings.apiKey || "").onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    container.createEl("h3", { text: "Global Defaults" });
    new import_obsidian12.Setting(container).setName("Default Provider").setDesc("Default AI provider for all operations").addDropdown((dropdown) => dropdown.addOption("ollama", "Ollama").addOption("openai", "OpenAI").addOption("anthropic", "Anthropic").setValue(this.plugin.settings.defaultProvider || "ollama").onChange(async (value) => {
      this.plugin.settings.defaultProvider = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian12.Setting(container).setName("Default Model").setDesc("Default AI model for all operations").addText((text) => text.setPlaceholder("gemma3:4b").setValue(this.plugin.settings.defaultModel || "").onChange(async (value) => {
      this.plugin.settings.defaultModel = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian12.Setting(container).setName("Default Temperature").setDesc("Default temperature (0.0 = conservative, 1.0 = creative)").addSlider((slider) => slider.setLimits(0, 1, 0.1).setValue(this.plugin.settings.defaultTemperature || 0.3).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.defaultTemperature = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian12.Setting(container).setName("Default Streaming").setDesc("Enable streaming responses by default").addToggle((toggle) => toggle.setValue(this.plugin.settings.defaultStream || true).onChange(async (value) => {
      this.plugin.settings.defaultStream = value;
      await this.plugin.saveSettings();
    }));
  }
  displayOperationsSettings() {
    const container = this.containerEl.querySelector(".tab-content");
    if (!container)
      return;
    container.empty();
    this.createOperationAccordion(container, "Summarize", this.plugin.settings.summarize, async (config) => {
      this.plugin.settings.summarize = config;
      await this.plugin.saveSettings();
    });
    this.createOperationAccordion(container, "Keywords", this.plugin.settings.keywords, async (config) => {
      this.plugin.settings.keywords = config;
      await this.plugin.saveSettings();
    });
    this.createOperationAccordion(container, "Translate", this.plugin.settings.translate, async (config) => {
      this.plugin.settings.translate = config;
      await this.plugin.saveSettings();
    }, true);
    this.createOperationAccordion(container, "Rewrite", this.plugin.settings.rewrite, async (config) => {
      this.plugin.settings.rewrite = config;
      await this.plugin.saveSettings();
    });
    this.createOperationAccordion(container, "Compose", this.plugin.settings.compose, async (config) => {
      this.plugin.settings.compose = config;
      await this.plugin.saveSettings();
    });
  }
  createOperationAccordion(container, name, config, onSave, includeLanguage = false) {
    const accordion = container.createDiv("operation-accordion");
    accordion.style.marginBottom = "15px";
    accordion.style.border = "1px solid var(--background-modifier-border)";
    accordion.style.borderRadius = "5px";
    const header = accordion.createDiv("accordion-header");
    header.style.padding = "10px";
    header.style.background = "var(--background-secondary)";
    header.style.cursor = "pointer";
    header.style.display = "flex";
    header.style.justifyContent = "space-between";
    header.style.alignItems = "center";
    const title = header.createEl("h4", { text: name });
    title.style.margin = "0";
    const toggle = header.createEl("span", { text: "\u25BC" });
    toggle.style.transition = "transform 0.2s";
    const content = accordion.createDiv("accordion-content");
    content.style.padding = "10px";
    content.style.display = "none";
    header.addEventListener("click", () => {
      const isVisible = content.style.display !== "none";
      content.style.display = isVisible ? "none" : "block";
      toggle.style.transform = isVisible ? "rotate(0deg)" : "rotate(180deg)";
    });
    new import_obsidian12.Setting(content).setName("Provider").setDesc("AI provider for this operation").addDropdown((dropdown) => dropdown.addOption("ollama", "Ollama").addOption("openai", "OpenAI").addOption("anthropic", "Anthropic").setValue(config.provider).onChange(async (value) => {
      config.provider = value;
      await onSave(config);
    }));
    new import_obsidian12.Setting(content).setName("Model").setDesc("AI model to use").addText((text) => text.setPlaceholder("Model name").setValue(config.model).onChange(async (value) => {
      config.model = value;
      await onSave(config);
    }));
    new import_obsidian12.Setting(content).setName("Temperature").setDesc("Temperature (0.0 = conservative, 1.0 = creative)").addSlider((slider) => slider.setLimits(0, 1, 0.1).setValue(config.temperature).setDynamicTooltip().onChange(async (value) => {
      config.temperature = value;
      await onSave(config);
    }));
    new import_obsidian12.Setting(content).setName("Streaming").setDesc("Enable streaming responses").addToggle((toggle2) => toggle2.setValue(config.stream).onChange(async (value) => {
      config.stream = value;
      await onSave(config);
    }));
    if (name === "Summarize" || name === "Compose") {
      new import_obsidian12.Setting(content).setName("Max Length").setDesc("Maximum length of the output").addText((text) => text.setPlaceholder("100").setValue(config.maxLength.toString()).onChange(async (value) => {
        config.maxLength = parseInt(value) || 100;
        await onSave(config);
      }));
    }
    if (name === "Keywords") {
      new import_obsidian12.Setting(content).setName("Max Keywords").setDesc("Maximum number of keywords to extract").addText((text) => text.setPlaceholder("10").setValue(config.maxKeywords.toString()).onChange(async (value) => {
        config.maxKeywords = parseInt(value) || 10;
        await onSave(config);
      }));
    }
    if (includeLanguage) {
      new import_obsidian12.Setting(content).setName("Default Target Language").setDesc("Default language for translation").addDropdown((dropdown) => {
        SUPPORTED_LANGUAGES.forEach((lang) => {
          dropdown.addOption(lang.code, lang.label);
        });
        dropdown.setValue(config.defaultTargetLanguage);
        dropdown.onChange(async (value) => {
          config.defaultTargetLanguage = value;
          await onSave(config);
        });
      });
    }
  }
  displayAdvancedSettings() {
    const container = this.containerEl.querySelector(".tab-content");
    if (!container)
      return;
    container.empty();
    container.createEl("h3", { text: "Configuration Migration" });
    new import_obsidian12.Setting(container).setName("Import from YAML").setDesc("Import configuration from existing YAML file").addButton((button) => button.setButtonText("Import").setCta().onClick(async () => {
      try {
        const modal = new ImportFileModal(this.app, "yaml");
        modal.onImportComplete = (filePath, fileContent) => {
          if (filePath && fileContent) {
            this.plugin.configService.migrateFromYAMLContent(fileContent).then(async (migratedSettings) => {
              if (migratedSettings) {
                Object.assign(this.plugin.settings, migratedSettings);
                await this.plugin.saveSettings();
                this.display();
                const notice = document.createElement("div");
                notice.textContent = `Configuration imported from ${filePath}`;
                notice.style.padding = "10px";
                notice.style.background = "var(--background-modifier-success)";
                notice.style.color = "var(--text-normal)";
                notice.style.borderRadius = "5px";
                notice.style.marginTop = "10px";
                container.appendChild(notice);
                setTimeout(() => notice.remove(), 3e3);
              }
            }).catch((error) => {
              console.error("Migration failed:", error);
              const notice = document.createElement("div");
              notice.textContent = `Migration failed: ${error.message}`;
              notice.style.padding = "10px";
              notice.style.background = "var(--background-modifier-error)";
              notice.style.color = "var(--text-normal)";
              notice.style.borderRadius = "5px";
              notice.style.marginTop = "10px";
              container.appendChild(notice);
              setTimeout(() => notice.remove(), 3e3);
            });
          }
        };
        modal.open();
      } catch (error) {
        console.error("Import failed:", error);
        const notice = document.createElement("div");
        notice.textContent = `Import failed: ${error.message}`;
        notice.style.padding = "10px";
        notice.style.background = "var(--background-modifier-error)";
        notice.style.color = "var(--text-normal)";
        notice.style.borderRadius = "5px";
        notice.style.marginTop = "10px";
        container.appendChild(notice);
        setTimeout(() => notice.remove(), 3e3);
      }
    }));
    new import_obsidian12.Setting(container).setName("Export to YAML").setDesc("Export current configuration to YAML format").addButton((button) => button.setButtonText("Export").onClick(async () => {
      try {
        const yamlContent = await this.plugin.configService.exportToYAML();
        const modal = new ExportPathModal(this.app, "ai-config-export", "yaml", yamlContent);
        modal.onExportComplete = (savedPath) => {
          if (savedPath) {
            const notice = document.createElement("div");
            notice.textContent = `Configuration exported to ${savedPath}`;
            notice.style.padding = "10px";
            notice.style.background = "var(--background-modifier-success)";
            notice.style.color = "var(--text-normal)";
            notice.style.borderRadius = "5px";
            notice.style.marginTop = "10px";
            container.appendChild(notice);
            setTimeout(() => notice.remove(), 3e3);
          }
        };
        modal.open();
      } catch (error) {
        console.error("Export failed:", error);
        const notice = document.createElement("div");
        notice.textContent = `Export failed: ${error.message}`;
        notice.style.padding = "10px";
        notice.style.background = "var(--background-modifier-error)";
        notice.style.color = "var(--text-normal)";
        notice.style.borderRadius = "5px";
        notice.style.marginTop = "10px";
        container.appendChild(notice);
        setTimeout(() => notice.remove(), 3e3);
      }
    }));
    new import_obsidian12.Setting(container).setName("Reset to Defaults").setDesc("Reset all settings to default values").addButton((button) => button.setButtonText("Reset").setWarning().onClick(async () => {
      const { DEFAULT_SETTINGS: DEFAULT_SETTINGS2 } = await Promise.resolve().then(() => (init_config(), config_exports));
      this.plugin.settings = { ...DEFAULT_SETTINGS2 };
      await this.plugin.saveSettings();
      this.display();
    }));
    container.createEl("h3", { text: "Diagnostics" });
    new import_obsidian12.Setting(container).setName("Test API Connection").setDesc("Test the current API configuration").addButton((button) => button.setButtonText("Test").onClick(async () => {
      try {
        const response = await fetch(`${this.plugin.settings.apiUrl}/health`, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            ...this.plugin.settings.apiKey && { "Authorization": `Bearer ${this.plugin.settings.apiKey}` }
          }
        });
        if (response.ok) {
          const notice = document.createElement("div");
          notice.textContent = "API connection successful!";
          notice.style.padding = "10px";
          notice.style.background = "var(--background-modifier-success)";
          notice.style.color = "var(--text-normal)";
          notice.style.borderRadius = "5px";
          notice.style.marginTop = "10px";
          container.appendChild(notice);
          setTimeout(() => notice.remove(), 3e3);
        } else {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
      } catch (error) {
        console.error("API test failed:", error);
        const notice = document.createElement("div");
        notice.textContent = `API test failed: ${error.message}`;
        notice.style.padding = "10px";
        notice.style.background = "var(--background-modifier-error)";
        notice.style.color = "var(--text-normal)";
        notice.style.borderRadius = "5px";
        notice.style.marginTop = "10px";
        container.appendChild(notice);
        setTimeout(() => notice.remove(), 3e3);
      }
    }));
    new import_obsidian12.Setting(container).setName("View Current Configuration").setDesc("Show the current configuration in JSON format").addButton((button) => button.setButtonText("View").onClick(() => {
      const configJson = JSON.stringify(this.plugin.settings, null, 2);
      const modal = document.createElement("div");
      modal.style.position = "fixed";
      modal.style.top = "50%";
      modal.style.left = "50%";
      modal.style.transform = "translate(-50%, -50%)";
      modal.style.background = "var(--background-primary)";
      modal.style.border = "1px solid var(--background-modifier-border)";
      modal.style.borderRadius = "5px";
      modal.style.padding = "20px";
      modal.style.maxWidth = "80%";
      modal.style.maxHeight = "80%";
      modal.style.overflow = "auto";
      modal.style.zIndex = "1000";
      const pre = document.createElement("pre");
      pre.style.background = "var(--background-secondary)";
      pre.style.padding = "10px";
      pre.style.borderRadius = "3px";
      pre.style.overflow = "auto";
      pre.textContent = configJson;
      const closeButton = document.createElement("button");
      closeButton.textContent = "Close";
      closeButton.style.marginTop = "10px";
      closeButton.onclick = () => modal.remove();
      modal.appendChild(pre);
      modal.appendChild(closeButton);
      document.body.appendChild(modal);
    }));
  }
};

// src/ui/compose-modal.ts
var import_obsidian13 = require("obsidian");
var ComposePromptModal = class extends import_obsidian13.Modal {
  constructor(app, editor, selectedText, settings, composeOperation, uiStateService, initialValue = "") {
    super(app);
    this.editor = editor;
    this.settings = settings;
    this.composeOperation = composeOperation;
    this.initialValue = selectedText || initialValue;
    this.uiStateService = uiStateService;
  }
  onOpen() {
    this.uiStateService.setModalState(true);
    const { contentEl, modalEl } = this;
    contentEl.empty();
    const style = document.createElement("style");
    style.textContent = `
            @keyframes fadeInScaleUp {
                from {
                    opacity: 0;
                    transform: scale(0.95);
                }
                to {
                    opacity: 1;
                    transform: scale(1);
                }
            }

            @keyframes fadeOutScaleDown {
                from {
                    opacity: 1;
                    transform: scale(1);
                }
                to {
                    opacity: 0;
                    transform: scale(0.95);
                }
            }

            .modal.compose-modal-opening {
                animation: fadeInScaleUp 0.2s ease-out forwards;
            }

            .modal.compose-modal-closing {
                animation: fadeOutScaleDown 0.2s ease-in forwards;
            }
        `;
    document.head.appendChild(style);
    requestAnimationFrame(() => {
      this.modalEl.addClass("compose-modal-opening");
    });
    const textArea = contentEl.createEl("textarea", {
      placeholder: "Enter your AI prompt here..."
    });
    textArea.value = this.initialValue;
    textArea.style.cssText = `
            width: 100%;
            height: 200px;
            min-height: 200px;
            resize: vertical;
            padding: 12px;
            border: 1px solid var(--background-modifier-border);
            border-radius: 6px;
            background: var(--background-primary);
            color: var(--text-normal);
            font-family: var(--font-text);
            font-size: 14px;
            line-height: 1.5;
            box-sizing: border-box;
            margin-bottom: 15px;
        `;
    this.promptInput = {
      getValue: () => textArea.value,
      inputEl: textArea,
      setDisabled: (disabled) => {
        textArea.disabled = disabled;
      }
    };
    setTimeout(() => {
      textArea.focus();
      if (this.initialValue) {
        textArea.setSelectionRange(0, this.initialValue.length);
      }
    }, 100);
    textArea.addEventListener("keydown", (event) => {
      if (event.key === "Enter" && (event.ctrlKey || event.metaKey)) {
        event.preventDefault();
        this.handleSubmit();
      }
    });
    const buttonContainer = contentEl.createDiv("compose-modal-buttons");
    buttonContainer.style.cssText = `
            display: flex;
            justify-content: flex-end;
            gap: 12px;
        `;
    new import_obsidian13.ButtonComponent(buttonContainer).setButtonText("Cancel").onClick(() => this.close());
    this.submitButton = new import_obsidian13.ButtonComponent(buttonContainer).setButtonText("Generate").setCta().onClick(() => this.handleSubmit());
  }
  async handleSubmit() {
    const prompt = this.promptInput.getValue().trim();
    if (!prompt) {
      new import_obsidian13.Notice("Please enter a prompt");
      this.promptInput.inputEl.focus();
      return;
    }
    this.submitButton.setButtonText("Generating...");
    this.submitButton.setDisabled(true);
    this.promptInput.setDisabled(true);
    try {
      this.close();
      await this.composeOperation.execute(this.editor, prompt, this.settings);
    } catch (error) {
      console.error("Compose operation failed:", error);
      new import_obsidian13.Notice("Failed to generate suggestions. Please try again.");
      this.submitButton.setButtonText("Generate");
      this.submitButton.setDisabled(false);
      this.promptInput.setDisabled(false);
    }
  }
  onClose() {
    this.uiStateService.setModalState(false);
    const { contentEl } = this;
    contentEl.empty();
  }
  close() {
    this.modalEl.removeClass("compose-modal-opening");
    this.modalEl.addClass("compose-modal-closing");
    setTimeout(() => {
      super.close();
    }, 200);
  }
};

// src/ui/ai-context-menu.ts
var import_obsidian14 = require("obsidian");
var AIContextMenu = class extends import_obsidian14.Component {
  constructor(app, summarizeOperation, translateOperation, keywordsOperation, rewriteOperation, composeOperation, settings, uiStateService) {
    super();
    this.tones = TONES;
    this.app = app;
    this.summarizeOperation = summarizeOperation;
    this.translateOperation = translateOperation;
    this.keywordsOperation = keywordsOperation;
    this.rewriteOperation = rewriteOperation;
    this.composeOperation = composeOperation;
    this.settings = settings;
    this.popularLanguages = [...POPULAR_LANGUAGES];
    this.uiStateService = uiStateService;
  }
  updateSettings(settings) {
    this.settings = settings;
  }
  showContextMenu(editor, evt) {
    const selection = editor.getSelection();
    const menu = new import_obsidian14.Menu();
    menu.addItem((item) => {
      item.setTitle("AI Backends").setIcon("brain-circuit").setDisabled(true);
    });
    menu.addSeparator();
    menu.addItem((item) => {
      item.setTitle("Compose with AI").setIcon("edit-3").onClick(() => {
        new ComposePromptModal(
          this.app,
          editor,
          selection,
          this.settings,
          this.composeOperation,
          this.uiStateService
        ).open();
      });
    });
    if (selection.length > 0) {
      menu.addSeparator();
      menu.addItem((item) => {
        item.setTitle("Summarize").setIcon("document-text").onClick(async () => {
          await this.summarizeOperation.execute(editor, selection, this.settings);
        });
      });
      menu.addItem((item) => {
        item.setTitle("Extract Keywords").setIcon("tag").onClick(async () => {
          await this.keywordsOperation.execute(editor, selection, this.settings);
        });
      });
      menu.addSeparator();
      menu.addItem((item) => {
        item.setTitle("Improve description").setIcon("file-text").onClick(async () => {
          await this.rewriteOperation.improveDescription(editor, selection, this.settings);
        });
      });
      menu.addItem((item) => {
        item.setTitle("Improve writing").setIcon("wand").onClick(async () => {
          await this.rewriteOperation.improveWriting(editor, selection, this.settings);
        });
      });
      menu.addItem((item) => {
        item.setTitle("Fix spelling & grammar").setIcon("check").onClick(async () => {
          await this.rewriteOperation.fixSpellingGrammar(editor, selection, this.settings);
        });
      });
      menu.addItem((item) => {
        item.setTitle("Brainstorm").setIcon("lightbulb").onClick(async () => {
          await this.rewriteOperation.brainstorm(editor, selection, this.settings);
        });
      });
      menu.addItem((item) => {
        item.setTitle("Make shorter").setIcon("minus").onClick(async () => {
          await this.rewriteOperation.makeShorter(editor, selection, this.settings);
        });
      });
      menu.addItem((toneItem) => {
        toneItem.setTitle("Change tone to ...").setIcon("mic");
        const toneMenu = toneItem.setSubmenu();
        this.tones.forEach((tone) => {
          toneMenu.addItem((tItem) => {
            tItem.setTitle(tone).onClick(async () => {
              await this.rewriteOperation.changeTone(editor, selection, tone, this.settings);
            });
          });
        });
      });
      menu.addSeparator();
      menu.addItem((translateItem) => {
        translateItem.setTitle("Translate").setIcon("languages");
        const translateSubMenu = translateItem.setSubmenu();
        translateSubMenu.addItem((defaultItem) => {
          defaultItem.setTitle("Default Language").setIcon("globe").onClick(async () => {
            await this.translateOperation.execute(editor, selection, this.settings);
          });
        });
        translateSubMenu.addSeparator();
        this.popularLanguages.forEach((language) => {
          translateSubMenu.addItem((langItem) => {
            langItem.setTitle(language.label).onClick(async () => {
              await this.translateOperation.execute(editor, selection, this.settings, language.code);
            });
          });
        });
      });
    } else {
      menu.addItem((item) => {
        item.setTitle("Select text for more AI options").setIcon("info").setDisabled(true);
      });
    }
    let x = 0;
    let y = 0;
    if (evt) {
      x = evt.clientX;
      y = evt.clientY;
    } else {
      const activeLeaf = this.app.workspace.activeLeaf;
      if (activeLeaf && activeLeaf.view.containerEl) {
        const rect = activeLeaf.view.containerEl.getBoundingClientRect();
        x = rect.left + rect.width / 2;
        y = rect.top + rect.height / 3;
      }
    }
    menu.showAtPosition({ x, y });
  }
};

// src/ui/ribbon-icon.ts
var import_obsidian15 = require("obsidian");
var RibbonIconManager = class {
  constructor(app, aiContextMenu, composeOperation, settings, uiStateService) {
    this.app = app;
    this.aiContextMenu = aiContextMenu;
    this.composeOperation = composeOperation;
    this.settings = settings;
    this.uiStateService = uiStateService;
  }
  updateSettings(settings) {
    this.settings = settings;
  }
  handleRibbonIconClick(evt) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian15.MarkdownView);
    if (activeView) {
      const editor = activeView.editor;
      if (evt.shiftKey) {
        const selection = editor.getSelection();
        new ComposePromptModal(
          this.app,
          editor,
          selection,
          this.settings,
          this.composeOperation,
          this.uiStateService
        ).open();
      } else {
        this.aiContextMenu.showContextMenu(editor);
      }
    } else {
      const notice = new import_obsidian15.Notice("Open a note to use AI Backends");
      setTimeout(() => notice.hide(), 3e3);
    }
  }
};

// src/ui/floating-icon.ts
var import_obsidian16 = require("obsidian");
var FloatingIcon = class extends import_obsidian16.Component {
  constructor(app, aiContextMenu, composeOperation, settings, uiStateService) {
    super();
    this.isVisible = false;
    this.currentEditor = null;
    this.app = app;
    this.aiContextMenu = aiContextMenu;
    this.composeOperation = composeOperation;
    this.settings = settings;
    this.uiStateService = uiStateService;
    this.updatePositionThrottled = this.throttle(() => {
      this.updateIconPosition();
    }, 50);
  }
  updateSettings(settings) {
    this.settings = settings;
  }
  onload() {
    this.iconElement = document.createElement("div");
    this.iconElement.addClass("fab-FloatingActionButton");
    this.iconElement.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m12 2-3 7h6l-3 7"></path></svg>';
    this.iconElement.style.cssText = `
            position: absolute;
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background-color: var(--interactive-accent);
            color: var(--text-on-accent);
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 100;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
            transition: all 0.2s ease;
            opacity: 0;
            transform: scale(0.8);
            pointer-events: none;
        `;
    this.iconElement.addEventListener("mouseenter", () => {
      this.iconElement.style.backgroundColor = "var(--interactive-accent-hover)";
      this.iconElement.style.transform = "scale(1.1)";
    });
    this.iconElement.addEventListener("mouseleave", () => {
      this.iconElement.style.backgroundColor = "var(--interactive-accent)";
      this.iconElement.style.transform = "scale(1)";
    });
    this.iconElement.addEventListener("click", (evt) => {
      this.handleIconClick(evt);
    });
    (0, import_obsidian16.setTooltip)(this.iconElement, "AI Backends", {
      delay: 500,
      placement: "left"
    });
    document.body.appendChild(this.iconElement);
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", () => {
        this.handleEditorChange();
      })
    );
    this.registerEvent(
      this.app.workspace.on("editor-change", (editor) => {
        if (editor === this.currentEditor) {
          this.updatePositionThrottled();
        }
      })
    );
    this.registerDomEvent(document, "mousemove", (evt) => {
      this.handleMouseMove(evt);
    });
    this.handleEditorChange();
    this.uiStateService.on("modal-state-change", (state) => {
      if (state.isModalOpen) {
        this.hideIcon();
      }
    });
  }
  onunload() {
    if (this.iconElement && this.iconElement.parentNode) {
      this.iconElement.parentNode.removeChild(this.iconElement);
    }
  }
  handleEditorChange() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian16.MarkdownView);
    if (activeView && activeView.editor) {
      this.currentEditor = activeView.editor;
      this.showIcon();
    } else {
      this.currentEditor = null;
      this.hideIcon();
    }
  }
  handleMouseMove(evt) {
    if (!this.currentEditor)
      return;
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian16.MarkdownView);
    if (!activeView)
      return;
    const editorEl = activeView.containerEl;
    const rect = editorEl.getBoundingClientRect();
    if (evt.clientX >= rect.left && evt.clientX <= rect.right && evt.clientY >= rect.top && evt.clientY <= rect.bottom) {
      this.showIcon();
      this.updatePositionThrottled();
    } else {
      this.hideIcon();
    }
  }
  updateIconPosition() {
    if (!this.iconElement)
      return;
    this.iconElement.style.position = "fixed";
    this.iconElement.style.bottom = "45px";
    this.iconElement.style.right = "20px";
  }
  showIcon() {
    if (!this.isVisible && this.iconElement && !this.uiStateService.getState().isModalOpen) {
      this.isVisible = true;
      this.iconElement.style.opacity = "1";
      this.iconElement.style.transform = "scale(1)";
      this.iconElement.style.pointerEvents = "auto";
    }
  }
  hideIcon() {
    if (this.isVisible && this.iconElement) {
      this.isVisible = false;
      this.iconElement.style.opacity = "0";
      this.iconElement.style.transform = "scale(0.8)";
      this.iconElement.style.pointerEvents = "none";
    }
  }
  handleIconClick(evt) {
    if (!this.currentEditor)
      return;
    const selection = this.currentEditor.getSelection();
    if (selection.length > 0) {
      this.aiContextMenu.showContextMenu(this.currentEditor, evt);
    } else {
      new ComposePromptModal(
        this.app,
        this.currentEditor,
        selection,
        this.settings,
        this.composeOperation,
        this.uiStateService
      ).open();
    }
  }
  // Utility function to throttle function calls
  throttle(func, limit) {
    let inThrottle;
    return () => {
      if (!inThrottle) {
        func();
        inThrottle = true;
        setTimeout(() => inThrottle = false, limit);
      }
    };
  }
};

// src/main.ts
var AIPlugin = class extends import_obsidian17.Plugin {
  async onload() {
    await this.loadSettings();
    await this.initializeServices();
    await this.registerCommands();
    this.addSettingTab(new AIPluginSettingTab(this.app, this));
    this.addRibbonIcon(
      "brain-circuit",
      "AI Backends",
      (evt) => {
        this.ribbonIconManager.handleRibbonIconClick(evt);
      }
    );
    this.app.workspace.onLayoutReady(() => {
      console.log("AI Backends plugin initialized with UI-based settings");
    });
    this.addChild(this.floatingIcon);
  }
  async initializeServices() {
    this.configService = new ConfigService(this.app, this.settings);
    this.aiService = new AIService(this.settings);
    this.streamingService = new StreamingService();
    this.uiStateService = new UIStateService();
    this.summarizeOperation = new SummarizeOperation(
      this.aiService,
      this.streamingService,
      this.configService
    );
    this.translateOperation = new TranslateOperation(
      this.aiService,
      this.streamingService,
      this.configService
    );
    this.keywordsOperation = new KeywordsOperation(
      this.aiService,
      this.configService
    );
    this.rewriterOperation = new RewriteOperation(
      this.aiService,
      this.streamingService,
      this.configService
    );
    this.composeOperation = new ComposeOperation(
      this.aiService,
      this.streamingService,
      this.configService
    );
    this.commandsManager = new CommandsManager(
      this.summarizeOperation,
      this.translateOperation,
      this.keywordsOperation,
      this.rewriterOperation,
      this.settings
    );
    this.aiContextMenu = new AIContextMenu(
      this.app,
      this.summarizeOperation,
      this.translateOperation,
      this.keywordsOperation,
      this.rewriterOperation,
      this.composeOperation,
      this.settings,
      this.uiStateService
    );
    this.ribbonIconManager = new RibbonIconManager(
      this.app,
      this.aiContextMenu,
      this.composeOperation,
      this.settings,
      this.uiStateService
    );
    this.floatingIcon = new FloatingIcon(
      this.app,
      this.aiContextMenu,
      this.composeOperation,
      this.settings,
      this.uiStateService
    );
  }
  async registerCommands() {
    const commands = this.commandsManager.getCommands();
    commands.forEach((command) => {
      this.addCommand(command);
    });
    this.addCommand({
      id: "compose-with-ai",
      name: "Compose with AI",
      editorCallback: (editor) => {
        const selection = editor.getSelection();
        new ComposePromptModal(
          this.app,
          editor,
          selection,
          this.settings,
          this.composeOperation,
          this.uiStateService
        ).open();
      }
    });
    this.addCommand({
      id: "show-ai-context-menu",
      name: "Show AI Backends Menu",
      hotkeys: [{ modifiers: ["Mod", "Shift"], key: "a" }],
      editorCallback: (editor) => {
        this.aiContextMenu.showContextMenu(editor);
      }
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.configService.updateSettings(this.settings);
    this.aiService.updateSettings(this.settings);
    this.commandsManager.updateSettings(this.settings);
    this.aiContextMenu.updateSettings(this.settings);
    this.ribbonIconManager.updateSettings(this.settings);
    this.floatingIcon.updateSettings(this.settings);
    this.configService.updateSettings(this.settings);
  }
  onunload() {
    this.configService.cleanup();
  }
  // Example config creation removed - now using UI-based settings
};
/*! Bundled license information:

js-yaml/dist/js-yaml.mjs:
  (*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT *)
*/
//# sourceMappingURL=data:application/json;base64,
